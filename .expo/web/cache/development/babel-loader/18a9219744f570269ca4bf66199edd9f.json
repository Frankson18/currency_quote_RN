{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { G, Rect, Svg, Text } from \"react-native-svg\";\nimport AbstractChart, { DEFAULT_X_LABELS_HEIGHT_PERCENTAGE } from \"./AbstractChart\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar StackedBarChart = function (_super) {\n  __extends(StackedBarChart, _super);\n\n  function StackedBarChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.getBarPercentage = function () {\n      var _a = _this.props.chartConfig.barPercentage,\n          barPercentage = _a === void 0 ? 1 : _a;\n      return barPercentage;\n    };\n\n    _this.getBarRadius = function (ret, x) {\n      return _this.props.chartConfig.barRadius && ret.length === x.length - 1 ? _this.props.chartConfig.barRadius : 0;\n    };\n\n    _this.renderBars = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight,\n          border = _a.border,\n          colors = _a.colors,\n          _b = _a.stackedBar,\n          stackedBar = _b === void 0 ? false : _b,\n          verticalLabelsHeightPercentage = _a.verticalLabelsHeightPercentage;\n      return data.map(function (x, i) {\n        var barWidth = 32 * _this.getBarPercentage();\n\n        var ret = [];\n        var h = 0;\n        var st = paddingTop;\n        var fac = 1;\n\n        if (stackedBar) {\n          fac = 0.7;\n        }\n\n        var sum = _this.props.percentile ? x.reduce(function (a, b) {\n          return a + b;\n        }, 0) : border;\n        var barsAreaHeight = height * verticalLabelsHeightPercentage;\n\n        for (var z = 0; z < x.length; z++) {\n          h = barsAreaHeight * (x[z] / sum);\n          var y = barsAreaHeight - h + st;\n          var xC = (paddingRight + i * (width - paddingRight) / data.length + barWidth / 2) * fac;\n          ret.push(_jsx(Rect, {\n            x: xC,\n            y: y,\n            rx: _this.getBarRadius(ret, x),\n            ry: _this.getBarRadius(ret, x),\n            width: barWidth,\n            height: h,\n            fill: colors[z]\n          }, Math.random()));\n\n          if (!_this.props.hideLegend) {\n            ret.push(_jsx(Text, _objectSpread(_objectSpread({\n              x: xC + 7 + barWidth / 2,\n              textAnchor: \"end\",\n              y: h > 15 ? y + 15 : y + 7\n            }, _this.getPropsForLabels()), {}, {\n              children: x[z]\n            }), Math.random()));\n          }\n\n          st -= h;\n        }\n\n        return ret;\n      });\n    };\n\n    _this.renderLegend = function (_a) {\n      var legend = _a.legend,\n          colors = _a.colors,\n          width = _a.width,\n          height = _a.height;\n      return legend.map(function (x, i) {\n        return _jsxs(G, {\n          children: [_jsx(Rect, {\n            width: \"16px\",\n            height: \"16px\",\n            fill: colors[i],\n            rx: 8,\n            ry: 8,\n            x: width * 0.71,\n            y: height * 0.7 - i * 50\n          }), _jsx(Text, _objectSpread(_objectSpread({\n            x: width * 0.78,\n            y: height * 0.76 - i * 50\n          }, _this.getPropsForLabels()), {}, {\n            children: x\n          }))]\n        }, Math.random());\n      });\n    };\n\n    return _this;\n  }\n\n  StackedBarChart.prototype.render = function () {\n    var paddingTop = 15;\n    var paddingRight = 50;\n    var barWidth = 32 * this.getBarPercentage();\n    var _a = this.props,\n        width = _a.width,\n        height = _a.height,\n        _b = _a.style,\n        style = _b === void 0 ? {} : _b,\n        data = _a.data,\n        _c = _a.withHorizontalLabels,\n        withHorizontalLabels = _c === void 0 ? true : _c,\n        _d = _a.withVerticalLabels,\n        withVerticalLabels = _d === void 0 ? true : _d,\n        _e = _a.segments,\n        segments = _e === void 0 ? 4 : _e,\n        decimalPlaces = _a.decimalPlaces,\n        _f = _a.percentile,\n        percentile = _f === void 0 ? false : _f,\n        _g = _a.verticalLabelsHeightPercentage,\n        verticalLabelsHeightPercentage = _g === void 0 ? DEFAULT_X_LABELS_HEIGHT_PERCENTAGE : _g,\n        _h = _a.formatYLabel,\n        formatYLabel = _h === void 0 ? function (yLabel) {\n      return yLabel;\n    } : _h,\n        _j = _a.hideLegend,\n        hideLegend = _j === void 0 ? false : _j;\n    var _k = style.borderRadius,\n        borderRadius = _k === void 0 ? 0 : _k;\n    var config = {\n      width: width,\n      height: height\n    };\n    var border = 0;\n    var max = 0;\n\n    for (var i = 0; i < data.data.length; i++) {\n      var actual = data.data[i].reduce(function (pv, cv) {\n        return pv + cv;\n      }, 0);\n\n      if (actual > max) {\n        max = actual;\n      }\n    }\n\n    if (percentile) {\n      border = 100;\n    } else {\n      border = max;\n    }\n\n    var showLegend = !hideLegend && data.legend && data.legend.length != 0;\n    var stackedBar = showLegend;\n    return _jsx(View, {\n      style: style,\n      children: _jsxs(Svg, {\n        height: height,\n        width: width,\n        children: [this.renderDefs(__assign(__assign({}, config), this.props.chartConfig)), _jsx(Rect, {\n          width: \"100%\",\n          height: height,\n          rx: borderRadius,\n          ry: borderRadius,\n          fill: \"url(#backgroundGradient)\"\n        }), _jsx(G, {\n          children: this.renderHorizontalLines(__assign(__assign({}, config), {\n            count: segments,\n            paddingTop: paddingTop,\n            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage\n          }))\n        }), _jsx(G, {\n          children: withHorizontalLabels ? this.renderHorizontalLabels(__assign(__assign({}, config), {\n            count: segments,\n            data: [0, border],\n            paddingTop: paddingTop,\n            paddingRight: paddingRight,\n            decimalPlaces: decimalPlaces,\n            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage,\n            formatYLabel: formatYLabel\n          })) : null\n        }), _jsx(G, {\n          children: withVerticalLabels ? this.renderVerticalLabels(__assign(__assign({}, config), {\n            labels: data.labels,\n            paddingRight: paddingRight + 28,\n            stackedBar: stackedBar,\n            paddingTop: paddingTop,\n            horizontalOffset: barWidth,\n            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage\n          })) : null\n        }), _jsx(G, {\n          children: this.renderBars(__assign(__assign({}, config), {\n            data: data.data,\n            border: border,\n            colors: this.props.data.barColors,\n            paddingTop: paddingTop,\n            paddingRight: paddingRight + 20,\n            stackedBar: stackedBar,\n            verticalLabelsHeightPercentage: verticalLabelsHeightPercentage\n          }))\n        }), showLegend && this.renderLegend(__assign(__assign({}, config), {\n          legend: data.legend,\n          colors: this.props.data.barColors\n        }))]\n      })\n    });\n  };\n\n  return StackedBarChart;\n}(AbstractChart);\n\nexport default StackedBarChart;","map":{"version":3,"mappings":"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","names":["React","G","Rect","Svg","Text","AbstractChart","DEFAULT_X_LABELS_HEIGHT_PERCENTAGE","__extends","_this","props","chartConfig","barPercentage","_a","ret","x","barRadius","length","data","width","height","paddingTop","paddingRight","border","colors","_b","stackedBar","verticalLabelsHeightPercentage","map","i","barWidth","getBarPercentage","h","st","fac","sum","percentile","reduce","a","b","barsAreaHeight","z","y","xC","push","getBarRadius","Math","random","hideLegend","getPropsForLabels","legend","StackedBarChart","style","_c","withHorizontalLabels","_d","withVerticalLabels","_e","segments","decimalPlaces","_f","_g","_h","formatYLabel","yLabel","_j","_k","config","max","actual","pv","cv","showLegend","renderDefs","__assign","borderRadius","renderHorizontalLines","count","renderHorizontalLabels","renderVerticalLabels","labels","horizontalOffset","renderBars","barColors","renderLegend"],"sourceRoot":"","sources":["../src/StackedBarChart.tsx"],"sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\nimport { G, Rect, Svg, Text } from \"react-native-svg\";\n\nimport AbstractChart, {\n  AbstractChartConfig,\n  AbstractChartProps,\n  DEFAULT_X_LABELS_HEIGHT_PERCENTAGE\n} from \"./AbstractChart\";\n\nexport interface StackedBarChartData {\n  labels: string[];\n  legend: string[];\n  data: number[][];\n  barColors: string[];\n}\n\nexport interface StackedBarChartProps extends AbstractChartProps {\n  /**\n   * E.g.\n   * ```javascript\n   * const data = {\n   *   labels: [\"Test1\", \"Test2\"],\n   *   legend: [\"L1\", \"L2\", \"L3\"],\n   *   data: [[60, 60, 60], [30, 30, 60]],\n   *   barColors: [\"#dfe4ea\", \"#ced6e0\", \"#a4b0be\"]\n   * };\n   * ```\n   */\n  data: StackedBarChartData;\n  width: number;\n  height: number;\n  chartConfig: AbstractChartConfig;\n  hideLegend: boolean;\n  style?: Partial<ViewStyle>;\n  barPercentage?: number;\n  decimalPlaces?: number;\n  /**\n   * Show vertical labels - default: True.\n   */\n  withVerticalLabels?: boolean;\n  /**\n   * Show horizontal labels - default: True.\n   */\n  withHorizontalLabels?: boolean;\n  /**\n   * The number of horizontal lines\n   */\n  segments?: number;\n\n  percentile?: boolean;\n\n  /**\n   * Percentage of the chart height, dedicated to vertical labels\n   * (space below chart)\n   */\n  verticalLabelsHeightPercentage?: number;\n\n  formatYLabel?: (yLabel: string) => string;\n}\n\ntype StackedBarChartState = {};\n\nclass StackedBarChart extends AbstractChart<\n  StackedBarChartProps,\n  StackedBarChartState\n> {\n  getBarPercentage = () => {\n    const { barPercentage = 1 } = this.props.chartConfig;\n    return barPercentage;\n  };\n\n  getBarRadius = (ret: string | any[], x: string | any[]) => {\n    return this.props.chartConfig.barRadius && ret.length === x.length - 1\n      ? this.props.chartConfig.barRadius\n      : 0;\n  };\n\n  renderBars = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight,\n    border,\n    colors,\n    stackedBar = false,\n    verticalLabelsHeightPercentage\n  }: Pick<\n    Omit<AbstractChartConfig, \"data\">,\n    | \"width\"\n    | \"height\"\n    | \"paddingRight\"\n    | \"paddingTop\"\n    | \"stackedBar\"\n    | \"verticalLabelsHeightPercentage\"\n  > & {\n    border: number;\n    colors: string[];\n    data: number[][];\n  }) =>\n    data.map((x, i) => {\n      const barWidth = 32 * this.getBarPercentage();\n      const ret = [];\n      let h = 0;\n      let st = paddingTop;\n\n      let fac = 1;\n      if (stackedBar) {\n        fac = 0.7;\n      }\n      const sum = this.props.percentile ? x.reduce((a, b) => a + b, 0) : border;\n      const barsAreaHeight = height * verticalLabelsHeightPercentage;\n      for (let z = 0; z < x.length; z++) {\n        h = barsAreaHeight * (x[z] / sum);\n        const y = barsAreaHeight - h + st;\n        const xC =\n          (paddingRight +\n            (i * (width - paddingRight)) / data.length +\n            barWidth / 2) *\n          fac;\n\n        ret.push(\n          <Rect\n            key={Math.random()}\n            x={xC}\n            y={y}\n            rx={this.getBarRadius(ret, x)}\n            ry={this.getBarRadius(ret, x)}\n            width={barWidth}\n            height={h}\n            fill={colors[z]}\n          />\n        );\n\n        if (!this.props.hideLegend) {\n          ret.push(\n            <Text\n              key={Math.random()}\n              x={xC + 7 + barWidth / 2}\n              textAnchor=\"end\"\n              y={h > 15 ? y + 15 : y + 7}\n              {...this.getPropsForLabels()}\n            >\n              {x[z]}\n            </Text>\n          );\n        }\n\n        st -= h;\n      }\n\n      return ret;\n    });\n\n  renderLegend = ({\n    legend,\n    colors,\n    width,\n    height\n  }: Pick<AbstractChartConfig, \"width\" | \"height\"> & {\n    legend: string[];\n    colors: string[];\n  }) =>\n    legend.map((x, i) => {\n      return (\n        <G key={Math.random()}>\n          <Rect\n            width=\"16px\"\n            height=\"16px\"\n            fill={colors[i]}\n            rx={8}\n            ry={8}\n            x={width * 0.71}\n            y={height * 0.7 - i * 50}\n          />\n          <Text\n            x={width * 0.78}\n            y={height * 0.76 - i * 50}\n            {...this.getPropsForLabels()}\n          >\n            {x}\n          </Text>\n        </G>\n      );\n    });\n\n  render() {\n    const paddingTop = 15;\n    const paddingRight = 50;\n    const barWidth = 32 * this.getBarPercentage();\n\n    const {\n      width,\n      height,\n      style = {},\n      data,\n      withHorizontalLabels = true,\n      withVerticalLabels = true,\n      segments = 4,\n      decimalPlaces,\n      percentile = false,\n      verticalLabelsHeightPercentage = DEFAULT_X_LABELS_HEIGHT_PERCENTAGE,\n      formatYLabel = (yLabel: string) => {\n        return yLabel;\n      },\n      hideLegend = false\n    } = this.props;\n\n    const { borderRadius = 0 } = style;\n    const config = {\n      width,\n      height\n    };\n\n    let border = 0;\n\n    let max = 0;\n    for (let i = 0; i < data.data.length; i++) {\n      const actual = data.data[i].reduce((pv, cv) => pv + cv, 0);\n      if (actual > max) {\n        max = actual;\n      }\n    }\n\n    if (percentile) {\n      border = 100;\n    } else {\n      border = max;\n    }\n\n    const showLegend = !hideLegend && data.legend && data.legend.length != 0;\n    const stackedBar = showLegend;\n\n    return (\n      <View style={style}>\n        <Svg height={height} width={width}>\n          {this.renderDefs({\n            ...config,\n            ...this.props.chartConfig\n          })}\n          <Rect\n            width=\"100%\"\n            height={height}\n            rx={borderRadius}\n            ry={borderRadius}\n            fill=\"url(#backgroundGradient)\"\n          />\n          <G>\n            {this.renderHorizontalLines({\n              ...config,\n              count: segments,\n              paddingTop,\n              verticalLabelsHeightPercentage\n            })}\n          </G>\n          <G>\n            {withHorizontalLabels\n              ? this.renderHorizontalLabels({\n                  ...config,\n                  count: segments,\n                  data: [0, border],\n                  paddingTop,\n                  paddingRight,\n                  decimalPlaces,\n                  verticalLabelsHeightPercentage,\n                  formatYLabel\n                })\n              : null}\n          </G>\n          <G>\n            {withVerticalLabels\n              ? this.renderVerticalLabels({\n                  ...config,\n                  labels: data.labels,\n                  paddingRight: paddingRight + 28,\n                  stackedBar,\n                  paddingTop,\n                  horizontalOffset: barWidth,\n                  verticalLabelsHeightPercentage\n                })\n              : null}\n          </G>\n          <G>\n            {this.renderBars({\n              ...config,\n              data: data.data,\n              border,\n              colors: this.props.data.barColors,\n              paddingTop,\n              paddingRight: paddingRight + 20,\n              stackedBar,\n              verticalLabelsHeightPercentage\n            })}\n          </G>\n          {showLegend &&\n            this.renderLegend({\n              ...config,\n              legend: data.legend,\n              colors: this.props.data.barColors\n            })}\n        </Svg>\n      </View>\n    );\n  }\n}\n\nexport default StackedBarChart;\n"]},"metadata":{},"sourceType":"module"}