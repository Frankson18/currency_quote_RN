{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport qs from 'qs';\nexport var SessionUrlProvider = function () {\n  function SessionUrlProvider() {\n    _classCallCheck(this, SessionUrlProvider);\n  }\n\n  _createClass(SessionUrlProvider, [{\n    key: \"getDefaultReturnUrl\",\n    value: function getDefaultReturnUrl(urlPath, options) {\n      var _options$scheme;\n\n      var queryParams = SessionUrlProvider.getHostAddressQueryParams();\n      var path = SessionUrlProvider.SESSION_PATH;\n\n      if (urlPath) {\n        path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n      }\n\n      return Linking.createURL(path, {\n        scheme: (_options$scheme = options == null ? void 0 : options.scheme) != null ? _options$scheme : Linking.resolveScheme({\n          isSilent: true\n        }),\n        queryParams: queryParams,\n        isTripleSlashed: options == null ? void 0 : options.isTripleSlashed\n      });\n    }\n  }, {\n    key: \"getStartUrl\",\n    value: function getStartUrl(authUrl, returnUrl, projectNameForProxy) {\n      if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n        return '';\n      }\n\n      var queryString = qs.stringify({\n        authUrl: authUrl,\n        returnUrl: returnUrl\n      });\n      return this.getRedirectUrl({\n        projectNameForProxy: projectNameForProxy\n      }) + \"/start?\" + queryString;\n    }\n  }, {\n    key: \"getRedirectUrl\",\n    value: function getRedirectUrl(options) {\n      var _Constants$expoConfig, _Constants$manifest;\n\n      if (Platform.OS === 'web') {\n        if (Platform.isDOMAvailable) {\n          return [window.location.origin, options.urlPath].filter(Boolean).join('/');\n        } else {\n          return '';\n        }\n      }\n\n      var legacyExpoProjectFullName = options.projectNameForProxy || ((_Constants$expoConfig = Constants.expoConfig) == null ? void 0 : _Constants$expoConfig.originalFullName) || ((_Constants$manifest = Constants.manifest) == null ? void 0 : _Constants$manifest.id);\n\n      if (!legacyExpoProjectFullName) {\n        var nextSteps = '';\n\n        if (__DEV__) {\n          if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n            nextSteps = ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';\n          } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n            nextSteps = ' Please report this as a bug with the contents of `expo config --type public`.';\n          }\n        }\n\n        if (Constants.manifest2) {\n          nextSteps = ' Prefer AuthRequest (with the useProxy option set to false) in combination with an Expo Development Client build of your application.' + ' To continue using the AuthSession proxy, specify the project full name (@owner/slug) using the projectNameForProxy option.';\n        }\n\n        throw new Error('Cannot use the AuthSession proxy because the project full name is not defined.' + nextSteps);\n      }\n\n      var redirectUrl = SessionUrlProvider.BASE_URL + \"/\" + legacyExpoProjectFullName;\n\n      if (__DEV__) {\n        SessionUrlProvider.warnIfAnonymous(legacyExpoProjectFullName, redirectUrl);\n      }\n\n      return redirectUrl;\n    }\n  }], [{\n    key: \"getHostAddressQueryParams\",\n    value: function getHostAddressQueryParams() {\n      var _Constants$manifest$h, _Constants$manifest2, _Constants$manifest3, _Constants$manifest3$, _Constants$manifest3$2, _hostUri;\n\n      var hostUri = (_Constants$manifest$h = (_Constants$manifest2 = Constants.manifest) == null ? void 0 : _Constants$manifest2.hostUri) != null ? _Constants$manifest$h : (_Constants$manifest3 = Constants.manifest2) == null ? void 0 : (_Constants$manifest3$ = _Constants$manifest3.extra) == null ? void 0 : (_Constants$manifest3$2 = _Constants$manifest3$.expoClient) == null ? void 0 : _Constants$manifest3$2.hostUri;\n\n      if (!hostUri && (ExecutionEnvironment.StoreClient === Constants.executionEnvironment || Linking.resolveScheme({}))) {\n        if (!Constants.linkingUri) {\n          hostUri = '';\n        } else {\n          hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n        }\n      }\n\n      if (!hostUri) {\n        return undefined;\n      }\n\n      var uriParts = (_hostUri = hostUri) == null ? void 0 : _hostUri.split('?');\n\n      try {\n        return qs.parse(uriParts == null ? void 0 : uriParts[1]);\n      } catch (_unused) {}\n\n      return undefined;\n    }\n  }, {\n    key: \"warnIfAnonymous\",\n    value: function warnIfAnonymous(id, url) {\n      if (id.startsWith('@anonymous/')) {\n        console.warn(\"You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \\\"\" + url + \"\\\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.\");\n      }\n    }\n  }, {\n    key: \"removeScheme\",\n    value: function removeScheme(url) {\n      return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n    }\n  }, {\n    key: \"removeLeadingSlash\",\n    value: function removeLeadingSlash(url) {\n      return url.replace(/^\\//, '');\n    }\n  }]);\n\n  return SessionUrlProvider;\n}();\nSessionUrlProvider.BASE_URL = \"https://auth.expo.io\";\nSessionUrlProvider.SESSION_PATH = 'expo-auth-session';\nexport default new SessionUrlProvider();","map":{"version":3,"mappings":"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","names":["Constants","ExecutionEnvironment","Linking","Platform","qs","SessionUrlProvider","urlPath","options","queryParams","getHostAddressQueryParams","path","SESSION_PATH","removeLeadingSlash","filter","Boolean","join","createURL","scheme","resolveScheme","isSilent","isTripleSlashed","authUrl","returnUrl","projectNameForProxy","OS","isDOMAvailable","queryString","stringify","getRedirectUrl","window","location","origin","legacyExpoProjectFullName","expoConfig","originalFullName","manifest","id","nextSteps","__DEV__","executionEnvironment","Bare","StoreClient","manifest2","Error","redirectUrl","BASE_URL","warnIfAnonymous","hostUri","extra","expoClient","linkingUri","removeScheme","replace","undefined","uriParts","split","parse","url","startsWith","console","warn"],"sourceRoot":"","sources":["../src/SessionUrlProvider.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nimport qs, { ParsedQs } from 'qs';\n\nexport class SessionUrlProvider {\n  private static readonly BASE_URL = `https://auth.expo.io`;\n  private static readonly SESSION_PATH = 'expo-auth-session';\n\n  getDefaultReturnUrl(\n    urlPath?: string,\n    options?: Omit<Linking.CreateURLOptions, 'queryParams'>\n  ): string {\n    const queryParams = SessionUrlProvider.getHostAddressQueryParams();\n    let path = SessionUrlProvider.SESSION_PATH;\n    if (urlPath) {\n      path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n    }\n\n    return Linking.createURL(path, {\n      // The redirect URL doesn't matter for the proxy as long as it's valid, so silence warnings if needed.\n      scheme: options?.scheme ?? Linking.resolveScheme({ isSilent: true }),\n      queryParams,\n      isTripleSlashed: options?.isTripleSlashed,\n    });\n  }\n\n  getStartUrl(authUrl: string, returnUrl: string, projectNameForProxy: string | undefined): string {\n    if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n      // Return nothing in SSR envs\n      return '';\n    }\n    const queryString = qs.stringify({\n      authUrl,\n      returnUrl,\n    });\n\n    return `${this.getRedirectUrl({ projectNameForProxy })}/start?${queryString}`;\n  }\n\n  getRedirectUrl(options: { projectNameForProxy?: string; urlPath?: string }): string {\n    if (Platform.OS === 'web') {\n      if (Platform.isDOMAvailable) {\n        return [window.location.origin, options.urlPath].filter(Boolean).join('/');\n      } else {\n        // Return nothing in SSR envs\n        return '';\n      }\n    }\n\n    const legacyExpoProjectFullName =\n      options.projectNameForProxy ||\n      Constants.expoConfig?.originalFullName ||\n      Constants.manifest?.id;\n\n    if (!legacyExpoProjectFullName) {\n      let nextSteps = '';\n      if (__DEV__) {\n        if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n          nextSteps =\n            ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';\n        } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n          nextSteps =\n            ' Please report this as a bug with the contents of `expo config --type public`.';\n        }\n      }\n\n      if (Constants.manifest2) {\n        nextSteps =\n          ' Prefer AuthRequest (with the useProxy option set to false) in combination with an Expo Development Client build of your application.' +\n          ' To continue using the AuthSession proxy, specify the project full name (@owner/slug) using the projectNameForProxy option.';\n      }\n\n      throw new Error(\n        'Cannot use the AuthSession proxy because the project full name is not defined.' + nextSteps\n      );\n    }\n\n    const redirectUrl = `${SessionUrlProvider.BASE_URL}/${legacyExpoProjectFullName}`;\n    if (__DEV__) {\n      SessionUrlProvider.warnIfAnonymous(legacyExpoProjectFullName, redirectUrl);\n      // TODO: Verify with the dev server that the manifest is up to date.\n    }\n    return redirectUrl;\n  }\n\n  private static getHostAddressQueryParams(): ParsedQs | undefined {\n    let hostUri: string | undefined =\n      Constants.manifest?.hostUri ?? Constants.manifest2?.extra?.expoClient?.hostUri;\n    if (\n      !hostUri &&\n      (ExecutionEnvironment.StoreClient === Constants.executionEnvironment ||\n        Linking.resolveScheme({}))\n    ) {\n      if (!Constants.linkingUri) {\n        hostUri = '';\n      } else {\n        // we're probably not using up-to-date xdl, so just fake it for now\n        // we have to remove the /--/ on the end since this will be inserted again later\n        hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n      }\n    }\n\n    if (!hostUri) {\n      return undefined;\n    }\n\n    const uriParts = hostUri?.split('?');\n    try {\n      return qs.parse(uriParts?.[1]);\n    } catch {}\n\n    return undefined;\n  }\n\n  private static warnIfAnonymous(id, url): void {\n    if (id.startsWith('@anonymous/')) {\n      console.warn(\n        `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n      );\n    }\n  }\n\n  private static removeScheme(url: string) {\n    return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n  }\n\n  private static removeLeadingSlash(url: string) {\n    return url.replace(/^\\//, '');\n  }\n}\n\nexport default new SessionUrlProvider();\n"]},"metadata":{},"sourceType":"module"}