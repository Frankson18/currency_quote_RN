{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Defs, G, LinearGradient, Rect, Stop, Svg, Text } from \"react-native-svg\";\nimport AbstractChart from \"./AbstractChart\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar barWidth = 32;\n\nvar BarChart = function (_super) {\n  __extends(BarChart, _super);\n\n  function BarChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.getBarPercentage = function () {\n      var _a = _this.props.chartConfig.barPercentage,\n          barPercentage = _a === void 0 ? 1 : _a;\n      return barPercentage;\n    };\n\n    _this.renderBars = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight,\n          barRadius = _a.barRadius,\n          withCustomBarColorFromData = _a.withCustomBarColorFromData;\n\n      var baseHeight = _this.calcBaseHeight(data, height);\n\n      return data.map(function (x, i) {\n        var barHeight = _this.calcHeight(x, data, height);\n\n        var barWidth = 32 * _this.getBarPercentage();\n\n        return _jsx(Rect, {\n          x: paddingRight + i * (width - paddingRight) / data.length + barWidth / 2,\n          y: (barHeight > 0 ? baseHeight - barHeight : baseHeight) / 4 * 3 + paddingTop,\n          rx: barRadius,\n          width: barWidth,\n          height: Math.abs(barHeight) / 4 * 3,\n          fill: withCustomBarColorFromData ? \"url(#customColor_0_\" + i + \")\" : \"url(#fillShadowGradientFrom)\"\n        }, Math.random());\n      });\n    };\n\n    _this.renderBarTops = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight;\n\n      var baseHeight = _this.calcBaseHeight(data, height);\n\n      return data.map(function (x, i) {\n        var barHeight = _this.calcHeight(x, data, height);\n\n        var barWidth = 32 * _this.getBarPercentage();\n\n        return _jsx(Rect, {\n          x: paddingRight + i * (width - paddingRight) / data.length + barWidth / 2,\n          y: (baseHeight - barHeight) / 4 * 3 + paddingTop,\n          width: barWidth,\n          height: 2,\n          fill: _this.props.chartConfig.color(0.6)\n        }, Math.random());\n      });\n    };\n\n    _this.renderColors = function (_a) {\n      var data = _a.data,\n          flatColor = _a.flatColor;\n      return data.map(function (dataset, index) {\n        var _a, _b;\n\n        return _jsx(Defs, {\n          children: (_b = dataset.colors) === null || _b === void 0 ? void 0 : _b.map(function (color, colorIndex) {\n            var highOpacityColor = color(1.0);\n            var lowOpacityColor = color(0.1);\n            return _jsxs(LinearGradient, {\n              id: \"customColor_\" + index + \"_\" + colorIndex,\n              x1: 0,\n              y1: 0,\n              x2: 0,\n              y2: 1,\n              children: [_jsx(Stop, {\n                offset: \"0\",\n                stopColor: highOpacityColor,\n                stopOpacity: \"1\"\n              }), flatColor ? _jsx(Stop, {\n                offset: \"1\",\n                stopColor: highOpacityColor,\n                stopOpacity: \"1\"\n              }) : _jsx(Stop, {\n                offset: \"1\",\n                stopColor: lowOpacityColor,\n                stopOpacity: \"0\"\n              })]\n            }, index + \"_\" + colorIndex);\n          })\n        }, (_a = dataset.key) !== null && _a !== void 0 ? _a : index);\n      });\n    };\n\n    _this.renderValuesOnTopOfBars = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight;\n\n      var baseHeight = _this.calcBaseHeight(data, height);\n\n      var renderLabel = function renderLabel(value) {\n        if (_this.props.chartConfig.formatTopBarValue) {\n          return _this.props.chartConfig.formatTopBarValue(value);\n        } else {\n          return value;\n        }\n      };\n\n      return data.map(function (x, i) {\n        var barHeight = _this.calcHeight(x, data, height);\n\n        var barWidth = 32 * _this.getBarPercentage();\n\n        return _jsx(Text, {\n          x: paddingRight + i * (width - paddingRight) / data.length + barWidth / 1,\n          y: (baseHeight - barHeight) / 4 * 3 + paddingTop - 1,\n          fill: _this.props.chartConfig.color(0.6),\n          fontSize: \"12\",\n          textAnchor: \"middle\",\n          children: renderLabel(data[i])\n        }, Math.random());\n      });\n    };\n\n    return _this;\n  }\n\n  BarChart.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        width = _b.width,\n        height = _b.height,\n        data = _b.data,\n        _c = _b.style,\n        style = _c === void 0 ? {} : _c,\n        _d = _b.withHorizontalLabels,\n        withHorizontalLabels = _d === void 0 ? true : _d,\n        _e = _b.withVerticalLabels,\n        withVerticalLabels = _e === void 0 ? true : _e,\n        _f = _b.verticalLabelRotation,\n        verticalLabelRotation = _f === void 0 ? 0 : _f,\n        _g = _b.horizontalLabelRotation,\n        horizontalLabelRotation = _g === void 0 ? 0 : _g,\n        _h = _b.withInnerLines,\n        withInnerLines = _h === void 0 ? true : _h,\n        _j = _b.showBarTops,\n        showBarTops = _j === void 0 ? true : _j,\n        _k = _b.withCustomBarColorFromData,\n        withCustomBarColorFromData = _k === void 0 ? false : _k,\n        _l = _b.showValuesOnTopOfBars,\n        showValuesOnTopOfBars = _l === void 0 ? false : _l,\n        _m = _b.flatColor,\n        flatColor = _m === void 0 ? false : _m,\n        _o = _b.segments,\n        segments = _o === void 0 ? 4 : _o;\n    var _p = style.borderRadius,\n        borderRadius = _p === void 0 ? 0 : _p,\n        _q = style.paddingTop,\n        paddingTop = _q === void 0 ? 16 : _q,\n        _r = style.paddingRight,\n        paddingRight = _r === void 0 ? 64 : _r;\n    var config = {\n      width: width,\n      height: height,\n      verticalLabelRotation: verticalLabelRotation,\n      horizontalLabelRotation: horizontalLabelRotation,\n      barRadius: this.props.chartConfig && this.props.chartConfig.barRadius || 0,\n      decimalPlaces: (_a = this.props.chartConfig && this.props.chartConfig.decimalPlaces) !== null && _a !== void 0 ? _a : 2,\n      formatYLabel: this.props.chartConfig && this.props.chartConfig.formatYLabel || function (label) {\n        return label;\n      },\n      formatXLabel: this.props.chartConfig && this.props.chartConfig.formatXLabel || function (label) {\n        return label;\n      }\n    };\n    return _jsx(View, {\n      style: style,\n      children: _jsxs(Svg, {\n        height: height,\n        width: width,\n        children: [this.renderDefs(__assign(__assign({}, config), this.props.chartConfig)), this.renderColors(__assign(__assign({}, this.props.chartConfig), {\n          flatColor: flatColor,\n          data: this.props.data.datasets\n        })), _jsx(Rect, {\n          width: \"100%\",\n          height: height,\n          rx: borderRadius,\n          ry: borderRadius,\n          fill: \"url(#backgroundGradient)\"\n        }), _jsx(G, {\n          children: withInnerLines ? this.renderHorizontalLines(__assign(__assign({}, config), {\n            count: segments,\n            paddingTop: paddingTop\n          })) : null\n        }), _jsx(G, {\n          children: withHorizontalLabels ? this.renderHorizontalLabels(__assign(__assign({}, config), {\n            count: segments,\n            data: data.datasets[0].data,\n            paddingTop: paddingTop,\n            paddingRight: paddingRight\n          })) : null\n        }), _jsx(G, {\n          children: withVerticalLabels ? this.renderVerticalLabels(__assign(__assign({}, config), {\n            labels: data.labels,\n            paddingRight: paddingRight,\n            paddingTop: paddingTop,\n            horizontalOffset: barWidth * this.getBarPercentage()\n          })) : null\n        }), _jsx(G, {\n          children: this.renderBars(__assign(__assign({}, config), {\n            data: data.datasets[0].data,\n            paddingTop: paddingTop,\n            paddingRight: paddingRight,\n            withCustomBarColorFromData: withCustomBarColorFromData\n          }))\n        }), _jsx(G, {\n          children: showValuesOnTopOfBars && this.renderValuesOnTopOfBars(__assign(__assign({}, config), {\n            data: data.datasets[0].data,\n            paddingTop: paddingTop,\n            paddingRight: paddingRight\n          }))\n        }), _jsx(G, {\n          children: showBarTops && this.renderBarTops(__assign(__assign({}, config), {\n            data: data.datasets[0].data,\n            paddingTop: paddingTop,\n            paddingRight: paddingRight\n          }))\n        })]\n      })\n    });\n  };\n\n  return BarChart;\n}(AbstractChart);\n\nexport default BarChart;","map":{"version":3,"mappings":"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","names":["React","Defs","G","LinearGradient","Rect","Stop","Svg","Text","AbstractChart","barWidth","__extends","_this","props","chartConfig","barPercentage","_a","data","width","height","paddingTop","paddingRight","barRadius","withCustomBarColorFromData","baseHeight","calcBaseHeight","map","x","i","barHeight","calcHeight","getBarPercentage","length","Math","abs","random","color","flatColor","dataset","index","colors","_b","colorIndex","highOpacityColor","lowOpacityColor","key","renderLabel","value","formatTopBarValue","BarChart","_c","style","_d","withHorizontalLabels","_e","withVerticalLabels","_f","verticalLabelRotation","_g","horizontalLabelRotation","_h","withInnerLines","_j","showBarTops","_k","_l","showValuesOnTopOfBars","_m","_o","segments","_p","_q","_r","config","decimalPlaces","formatYLabel","label","formatXLabel","renderDefs","__assign","renderColors","datasets","borderRadius","renderHorizontalLines","count","renderHorizontalLabels","renderVerticalLabels","labels","horizontalOffset","renderBars","renderValuesOnTopOfBars","renderBarTops"],"sourceRoot":"","sources":["../src/BarChart.tsx"],"sourcesContent":["import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\nimport {\n  Defs,\n  G,\n  LinearGradient,\n  Rect,\n  Stop,\n  Svg,\n  Text\n} from \"react-native-svg\";\n\nimport AbstractChart, {\n  AbstractChartConfig,\n  AbstractChartProps\n} from \"./AbstractChart\";\nimport { ChartData } from \"./HelperTypes\";\n\nconst barWidth = 32;\n\nexport interface BarChartProps extends AbstractChartProps {\n  data: ChartData;\n  width: number;\n  height: number;\n  fromZero?: boolean;\n  withInnerLines?: boolean;\n  yAxisLabel: string;\n  yAxisSuffix: string;\n  chartConfig: AbstractChartConfig;\n  style?: Partial<ViewStyle>;\n  horizontalLabelRotation?: number;\n  verticalLabelRotation?: number;\n  /**\n   * Show vertical labels - default: True.\n   */\n  withVerticalLabels?: boolean;\n  /**\n   * Show horizontal labels - default: True.\n   */\n  withHorizontalLabels?: boolean;\n  /**\n   * The number of horizontal lines\n   */\n  segments?: number;\n  showBarTops?: boolean;\n  showValuesOnTopOfBars?: boolean;\n  withCustomBarColorFromData?: boolean;\n  flatColor?: boolean;\n  \n}\n\ntype BarChartState = {};\n\nclass BarChart extends AbstractChart<BarChartProps, BarChartState> {\n  getBarPercentage = () => {\n    const { barPercentage = 1 } = this.props.chartConfig;\n    return barPercentage;\n  };\n\n  renderBars = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight,\n    barRadius,\n    withCustomBarColorFromData\n  }: Pick<\n    Omit<AbstractChartConfig, \"data\">,\n    \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\" | \"barRadius\"\n  > & {\n    data: number[];\n    withCustomBarColorFromData: boolean;\n  }) => {\n    const baseHeight = this.calcBaseHeight(data, height);\n\n    return data.map((x, i) => {\n      const barHeight = this.calcHeight(x, data, height);\n      const barWidth = 32 * this.getBarPercentage();\n      return (\n        <Rect\n          key={Math.random()}\n          x={\n            paddingRight +\n            (i * (width - paddingRight)) / data.length +\n            barWidth / 2\n          }\n          y={\n            ((barHeight > 0 ? baseHeight - barHeight : baseHeight) / 4) * 3 +\n            paddingTop\n          }\n          rx={barRadius}\n          width={barWidth}\n          height={(Math.abs(barHeight) / 4) * 3}\n          fill={\n            withCustomBarColorFromData\n              ? `url(#customColor_0_${i})`\n              : \"url(#fillShadowGradientFrom)\"\n          }\n        />\n      );\n    });\n  };\n\n  renderBarTops = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight\n  }: Pick<\n    Omit<AbstractChartConfig, \"data\">,\n    \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    data: number[];\n  }) => {\n    const baseHeight = this.calcBaseHeight(data, height);\n\n    return data.map((x, i) => {\n      const barHeight = this.calcHeight(x, data, height);\n      const barWidth = 32 * this.getBarPercentage();\n      return (\n        <Rect\n          key={Math.random()}\n          x={\n            paddingRight +\n            (i * (width - paddingRight)) / data.length +\n            barWidth / 2\n          }\n          y={((baseHeight - barHeight) / 4) * 3 + paddingTop}\n          width={barWidth}\n          height={2}\n          fill={this.props.chartConfig.color(0.6)}\n        />\n      );\n    });\n  };\n\n  renderColors = ({\n    data,\n    flatColor\n  }: Pick<AbstractChartConfig, \"data\"> & {\n    flatColor: boolean;\n  }) => {\n    return data.map((dataset, index) => (\n      <Defs key={dataset.key ?? index}>\n        {dataset.colors?.map((color, colorIndex) => {\n          const highOpacityColor = color(1.0);\n          const lowOpacityColor = color(0.1);\n\n          return (\n            <LinearGradient\n              id={`customColor_${index}_${colorIndex}`}\n              key={`${index}_${colorIndex}`}\n              x1={0}\n              y1={0}\n              x2={0}\n              y2={1}\n            >\n              <Stop offset=\"0\" stopColor={highOpacityColor} stopOpacity=\"1\" />\n              {flatColor ? (\n                <Stop offset=\"1\" stopColor={highOpacityColor} stopOpacity=\"1\" />\n              ) : (\n                  <Stop offset=\"1\" stopColor={lowOpacityColor} stopOpacity=\"0\" />\n                )}\n            </LinearGradient>\n          );\n        })}\n      </Defs>\n    ));\n  };\n\n  renderValuesOnTopOfBars = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight\n  }: Pick<\n    Omit<AbstractChartConfig, \"data\">,\n    \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    data: number[];\n  }) => {\n    const baseHeight = this.calcBaseHeight(data, height);\n\n    const renderLabel = (value: number) => {\n      if(this.props.chartConfig.formatTopBarValue) {\n        return this.props.chartConfig.formatTopBarValue(value)\n      }\n      else {\n        return value\n      }\n    }\n    return data.map((x, i) => {\n      const barHeight = this.calcHeight(x, data, height);\n      const barWidth = 32 * this.getBarPercentage();\n      return (\n        <Text\n          key={Math.random()}\n          x={\n            paddingRight +\n            (i * (width - paddingRight)) / data.length +\n            barWidth / 1\n            \n          }\n          y={((baseHeight - barHeight) / 4) * 3 + paddingTop - 1}\n          fill={this.props.chartConfig.color(0.6)}\n          fontSize=\"12\"\n          textAnchor=\"middle\"\n        >\n          {renderLabel(data[i])}\n        </Text>\n      );\n    });\n  };\n\n  render() {\n    const {\n      width,\n      height,\n      data,\n      style = {},\n      withHorizontalLabels = true,\n      withVerticalLabels = true,\n      verticalLabelRotation = 0,\n      horizontalLabelRotation = 0,\n      withInnerLines = true,\n      showBarTops = true,\n      withCustomBarColorFromData = false,\n      showValuesOnTopOfBars = false,\n      flatColor = false,\n      segments = 4\n    } = this.props;\n\n    const { borderRadius = 0, paddingTop = 16, paddingRight = 64 } = style;\n\n    const config = {\n      width,\n      height,\n      verticalLabelRotation,\n      horizontalLabelRotation,\n      barRadius:\n        (this.props.chartConfig && this.props.chartConfig.barRadius) || 0,\n      decimalPlaces:\n        (this.props.chartConfig && this.props.chartConfig.decimalPlaces) ?? 2,\n      formatYLabel:\n        (this.props.chartConfig && this.props.chartConfig.formatYLabel) ||\n        function (label) {\n          return label;\n        },\n      formatXLabel:\n        (this.props.chartConfig && this.props.chartConfig.formatXLabel) ||\n        function (label) {\n          return label;\n        }\n    };\n\n    return (\n      <View style={style}>\n        <Svg height={height} width={width}>\n          {this.renderDefs({\n            ...config,\n            ...this.props.chartConfig\n          })}\n          {this.renderColors({\n            ...this.props.chartConfig,\n            flatColor: flatColor,\n            data: this.props.data.datasets\n          })}\n          <Rect\n            width=\"100%\"\n            height={height}\n            rx={borderRadius}\n            ry={borderRadius}\n            fill=\"url(#backgroundGradient)\"\n          />\n          <G>\n            {withInnerLines\n              ? this.renderHorizontalLines({\n                ...config,\n                count: segments,\n                paddingTop\n              })\n              : null}\n          </G>\n          <G>\n            {withHorizontalLabels\n              ? this.renderHorizontalLabels({\n                ...config,\n                count: segments,\n                data: data.datasets[0].data,\n                paddingTop: paddingTop as number,\n                paddingRight: paddingRight as number\n              })\n              : null}\n          </G>\n          <G>\n            {withVerticalLabels\n              ? this.renderVerticalLabels({\n                ...config,\n                labels: data.labels,\n                paddingRight: paddingRight as number,\n                paddingTop: paddingTop as number,\n                horizontalOffset: barWidth * this.getBarPercentage()\n              })\n              : null}\n          </G>\n          <G>\n            {this.renderBars({\n              ...config,\n              data: data.datasets[0].data,\n              paddingTop: paddingTop as number,\n              paddingRight: paddingRight as number,\n              withCustomBarColorFromData: withCustomBarColorFromData\n            })}\n          </G>\n          <G>\n            {showValuesOnTopOfBars &&\n              this.renderValuesOnTopOfBars({\n                ...config,\n                data: data.datasets[0].data,\n                paddingTop: paddingTop as number,\n                paddingRight: paddingRight as number\n              })}\n          </G>\n          <G>\n            {showBarTops &&\n              this.renderBarTops({\n                ...config,\n                data: data.datasets[0].data,\n                paddingTop: paddingTop as number,\n                paddingRight: paddingRight as number\n              })}\n          </G>\n        </Svg>\n      </View>\n    );\n  }\n}\n\nexport default BarChart;\n"]},"metadata":{},"sourceType":"module"}