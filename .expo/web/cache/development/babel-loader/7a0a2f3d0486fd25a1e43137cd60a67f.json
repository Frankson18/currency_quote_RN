{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { UnavailabilityError } from 'expo-modules-core';\nimport { CryptoDigestAlgorithm, CryptoEncoding } from \"./Crypto.types\";\nimport ExpoCrypto from \"./ExpoCrypto\";\nexport * from \"./Crypto.types\";\n\nvar CryptoError = function (_TypeError) {\n  _inherits(CryptoError, _TypeError);\n\n  var _super = _createSuper(CryptoError);\n\n  function CryptoError(message) {\n    var _this;\n\n    _classCallCheck(this, CryptoError);\n\n    _this = _super.call(this, \"expo-crypto: \" + message);\n    _this.code = 'ERR_CRYPTO';\n    return _this;\n  }\n\n  return _createClass(CryptoError);\n}(_wrapNativeSuper(TypeError));\n\nfunction assertAlgorithm(algorithm) {\n  if (!Object.values(CryptoDigestAlgorithm).includes(algorithm)) {\n    throw new CryptoError(\"Invalid algorithm provided. Expected one of: CryptoDigestAlgorithm.\" + Object.keys(CryptoDigestAlgorithm).join(', AlgCryptoDigestAlgorithmorithm.'));\n  }\n}\n\nfunction assertData(data) {\n  if (typeof data !== 'string') {\n    throw new CryptoError(\"Invalid data provided. Expected a string.\");\n  }\n}\n\nfunction assertEncoding(encoding) {\n  if (!Object.values(CryptoEncoding).includes(encoding)) {\n    throw new CryptoError(\"Invalid encoding provided. Expected one of: CryptoEncoding.\" + Object.keys(CryptoEncoding).join(', CryptoEncoding.'));\n  }\n}\n\nexport function digestStringAsync(_x, _x2) {\n  return _digestStringAsync.apply(this, arguments);\n}\n\nfunction _digestStringAsync() {\n  _digestStringAsync = _asyncToGenerator(function* (algorithm, data) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      encoding: CryptoEncoding.HEX\n    };\n\n    if (!ExpoCrypto.digestStringAsync) {\n      throw new UnavailabilityError('expo-crypto', 'digestStringAsync');\n    }\n\n    assertAlgorithm(algorithm);\n    assertData(data);\n    assertEncoding(options.encoding);\n    return yield ExpoCrypto.digestStringAsync(algorithm, data, options);\n  });\n  return _digestStringAsync.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA,SAASA,mBAAT,QAAoC,mBAApC;AAEA,SAASC,qBAAT,EAAgCC,cAAhC;AACA,OAAOC,UAAP;AAEA;;IAEMC,W;;;;;EAGJ,qBAAYC,OAAZ,EAA2B;IAAA;;IAAA;;IACzB,4CAAsBA,OAAtB;IADyB,MAF3BC,IAE2B,GAFpB,YAEoB;IAAA;EAE1B;;;mBALuBC,S;;AAQ1B,SAASC,eAAT,CAAyBC,SAAzB,EAAyD;EACvD,IAAI,CAACC,MAAM,CAACC,MAAP,CAAcV,qBAAd,EAAqCW,QAArC,CAA8CH,SAA9C,CAAL,EAA+D;IAC7D,MAAM,IAAIL,WAAJ,yEACkEM,MAAM,CAACG,IAAP,CACpEZ,qBADoE,EAEpEa,IAFoE,CAE/D,mCAF+D,CADlE,CAAN;EAKD;AACF;;AAED,SAASC,UAAT,CAAoBC,IAApB,EAAgC;EAC9B,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;IAC5B,MAAM,IAAIZ,WAAJ,6CAAN;EACD;AACF;;AAED,SAASa,cAAT,CAAwBC,QAAxB,EAAgD;EAC9C,IAAI,CAACR,MAAM,CAACC,MAAP,CAAcT,cAAd,EAA8BU,QAA9B,CAAuCM,QAAvC,CAAL,EAAuD;IACrD,MAAM,IAAId,WAAJ,iEAC0DM,MAAM,CAACG,IAAP,CAC5DX,cAD4D,EAE5DY,IAF4D,CAEvD,mBAFuD,CAD1D,CAAN;EAKD;AACF;;AAuBD,gBAAsBK,iBAAtB;EAAA;AAAA;;;yCAAO,WACLV,SADK,EAELO,IAFK,EAG0D;IAAA,IAA/DI,OAA+D,uEAAhC;MAAEF,QAAQ,EAAEhB,cAAc,CAACmB;IAA3B,CAAgC;;IAE/D,IAAI,CAAClB,UAAU,CAACgB,iBAAhB,EAAmC;MACjC,MAAM,IAAInB,mBAAJ,CAAwB,aAAxB,EAAuC,mBAAvC,CAAN;IACD;;IAEDQ,eAAe,CAACC,SAAD,CAAf;IACAM,UAAU,CAACC,IAAD,CAAV;IACAC,cAAc,CAACG,OAAO,CAACF,QAAT,CAAd;IAEA,aAAaf,UAAU,CAACgB,iBAAX,CAA6BV,SAA7B,EAAwCO,IAAxC,EAA8CI,OAA9C,CAAb;EACD,C","names":["UnavailabilityError","CryptoDigestAlgorithm","CryptoEncoding","ExpoCrypto","CryptoError","message","code","TypeError","assertAlgorithm","algorithm","Object","values","includes","keys","join","assertData","data","assertEncoding","encoding","digestStringAsync","options","HEX"],"sourceRoot":"","sources":["../src/Crypto.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport { CryptoDigestAlgorithm, CryptoEncoding, CryptoDigestOptions, Digest } from './Crypto.types';\nimport ExpoCrypto from './ExpoCrypto';\n\nexport * from './Crypto.types';\n\nclass CryptoError extends TypeError {\n  code = 'ERR_CRYPTO';\n\n  constructor(message: string) {\n    super(`expo-crypto: ${message}`);\n  }\n}\n\nfunction assertAlgorithm(algorithm: CryptoDigestAlgorithm): void {\n  if (!Object.values(CryptoDigestAlgorithm).includes(algorithm)) {\n    throw new CryptoError(\n      `Invalid algorithm provided. Expected one of: CryptoDigestAlgorithm.${Object.keys(\n        CryptoDigestAlgorithm\n      ).join(', AlgCryptoDigestAlgorithmorithm.')}`\n    );\n  }\n}\n\nfunction assertData(data: string): void {\n  if (typeof data !== 'string') {\n    throw new CryptoError(`Invalid data provided. Expected a string.`);\n  }\n}\n\nfunction assertEncoding(encoding: CryptoEncoding): void {\n  if (!Object.values(CryptoEncoding).includes(encoding)) {\n    throw new CryptoError(\n      `Invalid encoding provided. Expected one of: CryptoEncoding.${Object.keys(\n        CryptoEncoding\n      ).join(', CryptoEncoding.')}`\n    );\n  }\n}\n\n// @needsAudit\n/**\n * The `digestStringAsync()` method of `Crypto` generates a digest of the supplied `data` string with the provided digest `algorithm`.\n * A digest is a short fixed-length value derived from some variable-length input. **Cryptographic digests** should exhibit _collision-resistance_,\n * meaning that it's very difficult to generate multiple inputs that have equal digest values.\n * You can specify the returned string format as one of `CryptoEncoding`. By default, the resolved value will be formatted as a `HEX` string.\n * On web, this method can only be called from a secure origin (https) otherwise an error will be thrown.\n *\n * @param algorithm The cryptographic hash function to use to transform a block of data into a fixed-size output.\n * @param data The value that will be used to generate a digest.\n * @param options Format of the digest string. Defaults to: `CryptoDigestOptions.HEX`.\n * @return Return a Promise which fulfills with a value representing the hashed input.\n *\n * @example\n * ```ts\n * const digest = await Crypto.digestStringAsync(\n *   Crypto.CryptoDigestAlgorithm.SHA512,\n *   'ðŸ¥“ Easy to Digest! ðŸ’™'\n * );\n * ```\n */\nexport async function digestStringAsync(\n  algorithm: CryptoDigestAlgorithm,\n  data: string,\n  options: CryptoDigestOptions = { encoding: CryptoEncoding.HEX }\n): Promise<Digest> {\n  if (!ExpoCrypto.digestStringAsync) {\n    throw new UnavailabilityError('expo-crypto', 'digestStringAsync');\n  }\n\n  assertAlgorithm(algorithm);\n  assertData(data);\n  assertEncoding(options.encoding);\n\n  return await ExpoCrypto.digestStringAsync(algorithm, data, options);\n}\n"]},"metadata":{},"sourceType":"module"}