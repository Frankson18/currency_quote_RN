{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n\nvar _window$document;\n\nimport { Platform } from 'expo-modules-core';\nimport qs from 'qs';\nvar isDOMAvailable = Platform.OS === 'web' && typeof window !== 'undefined' && !!((_window$document = window.document) != null && _window$document.createElement) && typeof URL !== 'undefined';\nexport function requestAsync(_x, _x2) {\n  return _requestAsync.apply(this, arguments);\n}\n\nfunction _requestAsync() {\n  _requestAsync = _asyncToGenerator(function* (requestUrl, fetchRequest) {\n    var _fetchRequest$dataTyp;\n\n    if (Platform.OS === 'web' && !isDOMAvailable) {\n      return;\n    }\n\n    var url = new URL(requestUrl);\n    var request = {\n      method: fetchRequest.method,\n      mode: 'cors',\n      headers: {}\n    };\n    var isJsonDataType = ((_fetchRequest$dataTyp = fetchRequest.dataType) == null ? void 0 : _fetchRequest$dataTyp.toLowerCase()) === 'json';\n\n    if (fetchRequest.headers) {\n      for (var i in fetchRequest.headers) {\n        if (i in fetchRequest.headers) {\n          request.headers[i] = fetchRequest.headers[i];\n        }\n      }\n    }\n\n    if (fetchRequest.body) {\n      var _fetchRequest$method;\n\n      if (((_fetchRequest$method = fetchRequest.method) == null ? void 0 : _fetchRequest$method.toUpperCase()) === 'POST') {\n        request.body = qs.stringify(fetchRequest.body);\n      } else {\n        for (var key of Object.keys(fetchRequest.body)) {\n          url.searchParams.append(key, fetchRequest.body[key]);\n        }\n      }\n    }\n\n    if (isJsonDataType && !('Accept' in request.headers)) {\n      request.headers['Accept'] = 'application/json, text/javascript; q=0.01';\n    }\n\n    var correctedUrl = url.toString().replace(/\\/$/, '');\n    var response = yield fetch(correctedUrl, request);\n    var contentType = response.headers.get('content-type');\n\n    if (isJsonDataType || contentType != null && contentType.includes('application/json')) {\n      return response.json();\n    }\n\n    return response.text();\n  });\n  return _requestAsync.apply(this, arguments);\n}","map":{"version":3,"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,OAAOC,EAAP,MAAe,IAAf;AAgBA,IAAMC,cAAc,GAClBF,QAAQ,CAACG,EAAT,KAAgB,KAAhB,IACA,OAAOC,MAAP,KAAkB,WADlB,IAEA,CAAC,sBAACA,MAAM,CAACC,QAAR,aAAC,iBAAiBC,aAAlB,CAFD,IAGA,OAAOC,GAAP,KAAe,WAJjB;AAMA,gBAAsBC,YAAtB;EAAA;AAAA;;;oCAAO,WAA+BC,UAA/B,EAAmDC,YAAnD,EAA6E;IAAA;;IAClF,IAAIV,QAAQ,CAACG,EAAT,KAAgB,KAAhB,IAAyB,CAACD,cAA9B,EAA8C;MAE5C;IACD;;IACD,IAAMS,GAAG,GAAG,IAAIJ,GAAJ,CAAQE,UAAR,CAAZ;IAEA,IAAMG,OAAO,GAA4D;MACvEC,MAAM,EAAEH,YAAY,CAACG,MADkD;MAEvEC,IAAI,EAAE,MAFiE;MAGvEC,OAAO,EAAE;IAH8D,CAAzE;IAMA,IAAMC,cAAc,GAAG,sCAAY,CAACC,QAAb,2CAAuBC,WAAvB,QAAyC,MAAhE;;IAEA,IAAIR,YAAY,CAACK,OAAjB,EAA0B;MACxB,KAAK,IAAMI,CAAX,IAAgBT,YAAY,CAACK,OAA7B,EAAsC;QACpC,IAAII,CAAC,IAAIT,YAAY,CAACK,OAAtB,EAA+B;UAC7BH,OAAO,CAACG,OAAR,CAAgBI,CAAhB,IAAqBT,YAAY,CAACK,OAAb,CAAqBI,CAArB,CAArB;QACD;MACF;IACF;;IAED,IAAIT,YAAY,CAACU,IAAjB,EAAuB;MAAA;;MACrB,IAAI,qCAAY,CAACP,MAAb,0CAAqBQ,WAArB,QAAuC,MAA3C,EAAmD;QACjDT,OAAO,CAACQ,IAAR,GAAenB,EAAE,CAACqB,SAAH,CAAaZ,YAAY,CAACU,IAA1B,CAAf;MACD,CAFD,MAEO;QACL,KAAK,IAAMG,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYf,YAAY,CAACU,IAAzB,CAAlB,EAAkD;UAChDT,GAAG,CAACe,YAAJ,CAAiBC,MAAjB,CAAwBJ,GAAxB,EAA6Bb,YAAY,CAACU,IAAb,CAAkBG,GAAlB,CAA7B;QACD;MACF;IACF;;IAED,IAAIP,cAAc,IAAI,EAAE,YAAYJ,OAAO,CAACG,OAAtB,CAAtB,EAAsD;MAEpDH,OAAO,CAACG,OAAR,CAAgB,QAAhB,IAA4B,2CAA5B;IACD;;IAGD,IAAMa,YAAY,GAAGjB,GAAG,CAACkB,QAAJ,GAAeC,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAArB;IAEA,IAAMC,QAAQ,SAASC,KAAK,CAACJ,YAAD,EAAehB,OAAf,CAA5B;IAEA,IAAMqB,WAAW,GAAGF,QAAQ,CAAChB,OAAT,CAAiBmB,GAAjB,CAAqB,cAArB,CAApB;;IACA,IAAIlB,cAAc,IAAIiB,WAAJ,YAAIA,WAAW,CAAEE,QAAb,CAAsB,kBAAtB,CAAtB,EAAiE;MAC/D,OAAOJ,QAAQ,CAACK,IAAT,EAAP;IACD;;IAED,OAAOL,QAAQ,CAACM,IAAT,EAAP;EACD,C","names":["Platform","qs","isDOMAvailable","OS","window","document","createElement","URL","requestAsync","requestUrl","fetchRequest","url","request","method","mode","headers","isJsonDataType","dataType","toLowerCase","i","body","toUpperCase","stringify","key","Object","keys","searchParams","append","correctedUrl","toString","replace","response","fetch","contentType","get","includes","json","text"],"sourceRoot":"","sources":["../src/Fetch.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport qs from 'qs';\n\nexport type Headers = Record<string, string> & {\n  'Content-Type': string;\n  Authorization?: string;\n  Accept?: string;\n};\n\nexport type FetchRequest = {\n  headers?: Headers;\n  body?: Record<string, string>;\n  dataType?: string;\n  method?: string;\n};\n\n// TODO(Bacon): pending react-native-adapter publish after sdk 38\nconst isDOMAvailable =\n  Platform.OS === 'web' &&\n  typeof window !== 'undefined' &&\n  !!window.document?.createElement &&\n  typeof URL !== 'undefined';\n\nexport async function requestAsync<T>(requestUrl: string, fetchRequest: FetchRequest): Promise<T> {\n  if (Platform.OS === 'web' && !isDOMAvailable) {\n    // @ts-ignore\n    return;\n  }\n  const url = new URL(requestUrl);\n\n  const request: Omit<RequestInit, 'headers'> & { headers: HeadersInit } = {\n    method: fetchRequest.method,\n    mode: 'cors',\n    headers: {},\n  };\n\n  const isJsonDataType = fetchRequest.dataType?.toLowerCase() === 'json';\n\n  if (fetchRequest.headers) {\n    for (const i in fetchRequest.headers) {\n      if (i in fetchRequest.headers) {\n        request.headers[i] = fetchRequest.headers[i] as string;\n      }\n    }\n  }\n\n  if (fetchRequest.body) {\n    if (fetchRequest.method?.toUpperCase() === 'POST') {\n      request.body = qs.stringify(fetchRequest.body);\n    } else {\n      for (const key of Object.keys(fetchRequest.body)) {\n        url.searchParams.append(key, fetchRequest.body[key]);\n      }\n    }\n  }\n\n  if (isJsonDataType && !('Accept' in request.headers)) {\n    // NOTE: Github authentication will return XML if this includes the standard `*/*`\n    request.headers['Accept'] = 'application/json, text/javascript; q=0.01';\n  }\n\n  // Fix a problem with React Native `URL` causing a trailing slash to be added.\n  const correctedUrl = url.toString().replace(/\\/$/, '');\n\n  const response = await fetch(correctedUrl, request);\n\n  const contentType = response.headers.get('content-type');\n  if (isJsonDataType || contentType?.includes('application/json')) {\n    return response.json();\n  }\n  // @ts-ignore: Type 'string' is not assignable to type 'T'.\n  return response.text();\n}\n"]},"metadata":{},"sourceType":"module"}