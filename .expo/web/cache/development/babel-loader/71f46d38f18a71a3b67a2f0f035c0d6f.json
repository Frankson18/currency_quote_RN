{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nimport React from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Circle, G, Path, Polygon, Polyline, Rect, Svg } from \"react-native-svg\";\nimport AbstractChart from \"../AbstractChart\";\nimport { LegendItem } from \"./LegendItem\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nvar LineChart = function (_super) {\n  __extends(LineChart, _super);\n\n  function LineChart() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.label = React.createRef();\n    _this.state = {\n      scrollableDotHorizontalOffset: new Animated.Value(0)\n    };\n\n    _this.getColor = function (dataset, opacity) {\n      return (dataset.color || _this.props.chartConfig.color)(opacity);\n    };\n\n    _this.getStrokeWidth = function (dataset) {\n      return dataset.strokeWidth || _this.props.chartConfig.strokeWidth || 3;\n    };\n\n    _this.getDatas = function (data) {\n      return data.reduce(function (acc, item) {\n        return item.data ? __spreadArrays(acc, item.data) : acc;\n      }, []);\n    };\n\n    _this.getPropsForDots = function (x, i) {\n      var _a = _this.props,\n          getDotProps = _a.getDotProps,\n          chartConfig = _a.chartConfig;\n\n      if (typeof getDotProps === \"function\") {\n        return getDotProps(x, i);\n      }\n\n      var _b = chartConfig.propsForDots,\n          propsForDots = _b === void 0 ? {} : _b;\n      return __assign({\n        r: \"4\"\n      }, propsForDots);\n    };\n\n    _this.renderDots = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight,\n          onDataPointClick = _a.onDataPointClick;\n      var output = [];\n\n      var datas = _this.getDatas(data);\n\n      var baseHeight = _this.calcBaseHeight(datas, height);\n\n      var _b = _this.props,\n          getDotColor = _b.getDotColor,\n          _c = _b.hidePointsAtIndex,\n          hidePointsAtIndex = _c === void 0 ? [] : _c,\n          _d = _b.renderDotContent,\n          renderDotContent = _d === void 0 ? function () {\n        return null;\n      } : _d;\n\n      var xMax = _this.getXMaxValues(data);\n\n      data.forEach(function (dataset) {\n        if (dataset.withDots == false) return;\n        dataset.data.forEach(function (x, i) {\n          if (hidePointsAtIndex.includes(i)) {\n            return;\n          }\n\n          var cx = paddingRight + i * (width - paddingRight) / xMax;\n          var cy = (baseHeight - _this.calcHeight(x, datas, height)) / 4 * 3 + paddingTop;\n\n          var onPress = function onPress() {\n            if (!onDataPointClick || hidePointsAtIndex.includes(i)) {\n              return;\n            }\n\n            onDataPointClick({\n              index: i,\n              value: x,\n              dataset: dataset,\n              x: cx,\n              y: cy,\n              getColor: function getColor(opacity) {\n                return _this.getColor(dataset, opacity);\n              }\n            });\n          };\n\n          output.push(_jsx(Circle, _objectSpread({\n            cx: cx,\n            cy: cy,\n            fill: typeof getDotColor === \"function\" ? getDotColor(x, i) : _this.getColor(dataset, 0.9),\n            onPress: onPress\n          }, _this.getPropsForDots(x, i)), Math.random()), _jsx(Circle, {\n            cx: cx,\n            cy: cy,\n            r: \"14\",\n            fill: \"#fff\",\n            fillOpacity: 0,\n            onPress: onPress\n          }, Math.random()), renderDotContent({\n            x: cx,\n            y: cy,\n            index: i,\n            indexData: x\n          }));\n        });\n      });\n      return output;\n    };\n\n    _this.renderScrollableDot = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingTop = _a.paddingTop,\n          paddingRight = _a.paddingRight,\n          scrollableDotHorizontalOffset = _a.scrollableDotHorizontalOffset,\n          scrollableDotFill = _a.scrollableDotFill,\n          scrollableDotStrokeColor = _a.scrollableDotStrokeColor,\n          scrollableDotStrokeWidth = _a.scrollableDotStrokeWidth,\n          scrollableDotRadius = _a.scrollableDotRadius,\n          scrollableInfoViewStyle = _a.scrollableInfoViewStyle,\n          scrollableInfoTextStyle = _a.scrollableInfoTextStyle,\n          _b = _a.scrollableInfoTextDecorator,\n          scrollableInfoTextDecorator = _b === void 0 ? function (x) {\n        return \"\" + x;\n      } : _b,\n          scrollableInfoSize = _a.scrollableInfoSize,\n          scrollableInfoOffset = _a.scrollableInfoOffset;\n      var output = [];\n\n      var datas = _this.getDatas(data);\n\n      var baseHeight = _this.calcBaseHeight(datas, height);\n\n      var vl = [];\n      var perData = width / data[0].data.length;\n\n      for (var index = 0; index < data[0].data.length; index++) {\n        vl.push(index * perData);\n      }\n\n      var lastIndex;\n      scrollableDotHorizontalOffset.addListener(function (value) {\n        var index = value.value / perData;\n\n        if (!lastIndex) {\n          lastIndex = index;\n        }\n\n        var abs = Math.floor(index);\n        var percent = index - abs;\n        abs = data[0].data.length - abs - 1;\n\n        if (index >= data[0].data.length - 1) {\n          _this.label.current.setNativeProps({\n            text: scrollableInfoTextDecorator(Math.floor(data[0].data[0]))\n          });\n        } else {\n          if (index > lastIndex) {\n            var base = data[0].data[abs];\n            var prev = data[0].data[abs - 1];\n\n            if (prev > base) {\n              var rest = prev - base;\n\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base + percent * rest))\n              });\n            } else {\n              var rest = base - prev;\n\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base - percent * rest))\n              });\n            }\n          } else {\n            var base = data[0].data[abs - 1];\n            var next = data[0].data[abs];\n            percent = 1 - percent;\n\n            if (next > base) {\n              var rest = next - base;\n\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base + percent * rest))\n              });\n            } else {\n              var rest = base - next;\n\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(base - percent * rest))\n              });\n            }\n          }\n        }\n\n        lastIndex = index;\n      });\n      data.forEach(function (dataset) {\n        if (dataset.withScrollableDot == false) return;\n        var perData = width / dataset.data.length;\n        var values = [];\n        var yValues = [];\n        var xValues = [];\n        var yValuesLabel = [];\n        var xValuesLabel = [];\n\n        for (var index = 0; index < dataset.data.length; index++) {\n          values.push(index * perData);\n          var yval = (baseHeight - _this.calcHeight(dataset.data[dataset.data.length - index - 1], datas, height)) / 4 * 3 + paddingTop;\n          yValues.push(yval);\n          var xval = paddingRight + (dataset.data.length - index - 1) * (width - paddingRight) / dataset.data.length;\n          xValues.push(xval);\n          yValuesLabel.push(yval - (scrollableInfoSize.height + scrollableInfoOffset));\n          xValuesLabel.push(xval - scrollableInfoSize.width / 2);\n        }\n\n        var translateX = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: xValues,\n          extrapolate: \"clamp\"\n        });\n        var translateY = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: yValues,\n          extrapolate: \"clamp\"\n        });\n        var labelTranslateX = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: xValuesLabel,\n          extrapolate: \"clamp\"\n        });\n        var labelTranslateY = scrollableDotHorizontalOffset.interpolate({\n          inputRange: values,\n          outputRange: yValuesLabel,\n          extrapolate: \"clamp\"\n        });\n        output.push([_jsx(Animated.View, {\n          style: [scrollableInfoViewStyle, {\n            transform: [{\n              translateX: labelTranslateX\n            }, {\n              translateY: labelTranslateY\n            }],\n            width: scrollableInfoSize.width,\n            height: scrollableInfoSize.height\n          }],\n          children: _jsx(TextInput, {\n            onLayout: function onLayout() {\n              _this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(Math.floor(data[0].data[data[0].data.length - 1]))\n              });\n            },\n            style: scrollableInfoTextStyle,\n            ref: _this.label\n          })\n        }, Math.random()), _jsx(AnimatedCircle, {\n          cx: translateX,\n          cy: translateY,\n          r: scrollableDotRadius,\n          stroke: scrollableDotStrokeColor,\n          strokeWidth: scrollableDotStrokeWidth,\n          fill: scrollableDotFill\n        }, Math.random())]);\n      });\n      return output;\n    };\n\n    _this.renderShadow = function (_a) {\n      var width = _a.width,\n          height = _a.height,\n          paddingRight = _a.paddingRight,\n          paddingTop = _a.paddingTop,\n          data = _a.data,\n          useColorFromDataset = _a.useColorFromDataset;\n\n      if (_this.props.bezier) {\n        return _this.renderBezierShadow({\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop,\n          data: data,\n          useColorFromDataset: useColorFromDataset\n        });\n      }\n\n      var datas = _this.getDatas(data);\n\n      var baseHeight = _this.calcBaseHeight(datas, height);\n\n      return data.map(function (dataset, index) {\n        return _jsx(Polygon, {\n          points: dataset.data.map(function (d, i) {\n            var x = paddingRight + i * (width - paddingRight) / dataset.data.length;\n            var y = (baseHeight - _this.calcHeight(d, datas, height)) / 4 * 3 + paddingTop;\n            return x + \",\" + y;\n          }).join(\" \") + (\" \" + (paddingRight + (width - paddingRight) / dataset.data.length * (dataset.data.length - 1)) + \",\" + (height / 4 * 3 + paddingTop) + \" \" + paddingRight + \",\" + (height / 4 * 3 + paddingTop)),\n          fill: \"url(#fillShadowGradientFrom\" + (useColorFromDataset ? \"_\" + index : \"\") + \")\",\n          strokeWidth: 0\n        }, index);\n      });\n    };\n\n    _this.renderLine = function (_a) {\n      var width = _a.width,\n          height = _a.height,\n          paddingRight = _a.paddingRight,\n          paddingTop = _a.paddingTop,\n          data = _a.data,\n          linejoinType = _a.linejoinType;\n\n      if (_this.props.bezier) {\n        return _this.renderBezierLine({\n          data: data,\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop\n        });\n      }\n\n      var output = [];\n\n      var datas = _this.getDatas(data);\n\n      var baseHeight = _this.calcBaseHeight(datas, height);\n\n      var xMax = _this.getXMaxValues(data);\n\n      var lastPoint;\n      data.forEach(function (dataset, index) {\n        var points = dataset.data.map(function (d, i) {\n          if (d === null) return lastPoint;\n          var x = i * (width - paddingRight) / xMax + paddingRight;\n          var y = (baseHeight - _this.calcHeight(d, datas, height)) / 4 * 3 + paddingTop;\n          lastPoint = x + \",\" + y;\n          return x + \",\" + y;\n        });\n        output.push(_jsx(Polyline, {\n          strokeLinejoin: linejoinType,\n          points: points.join(\" \"),\n          fill: \"none\",\n          stroke: _this.getColor(dataset, 0.2),\n          strokeWidth: _this.getStrokeWidth(dataset),\n          strokeDasharray: dataset.strokeDashArray,\n          strokeDashoffset: dataset.strokeDashOffset\n        }, index));\n      });\n      return output;\n    };\n\n    _this.getXMaxValues = function (data) {\n      return data.reduce(function (acc, cur) {\n        return cur.data.length > acc ? cur.data.length : acc;\n      }, 0);\n    };\n\n    _this.getBezierLinePoints = function (dataset, _a) {\n      var width = _a.width,\n          height = _a.height,\n          paddingRight = _a.paddingRight,\n          paddingTop = _a.paddingTop,\n          data = _a.data;\n\n      if (dataset.data.length === 0) {\n        return \"M0,0\";\n      }\n\n      var datas = _this.getDatas(data);\n\n      var xMax = _this.getXMaxValues(data);\n\n      var x = function x(i) {\n        return Math.floor(paddingRight + i * (width - paddingRight) / xMax);\n      };\n\n      var baseHeight = _this.calcBaseHeight(datas, height);\n\n      var y = function y(i) {\n        var yHeight = _this.calcHeight(dataset.data[i], datas, height);\n\n        return Math.floor((baseHeight - yHeight) / 4 * 3 + paddingTop);\n      };\n\n      return [\"M\" + x(0) + \",\" + y(0)].concat(dataset.data.slice(0, -1).map(function (_, i) {\n        var x_mid = (x(i) + x(i + 1)) / 2;\n        var y_mid = (y(i) + y(i + 1)) / 2;\n        var cp_x1 = (x_mid + x(i)) / 2;\n        var cp_x2 = (x_mid + x(i + 1)) / 2;\n        return \"Q \" + cp_x1 + \", \" + y(i) + \", \" + x_mid + \", \" + y_mid + (\" Q \" + cp_x2 + \", \" + y(i + 1) + \", \" + x(i + 1) + \", \" + y(i + 1));\n      })).join(\" \");\n    };\n\n    _this.renderBezierLine = function (_a) {\n      var data = _a.data,\n          width = _a.width,\n          height = _a.height,\n          paddingRight = _a.paddingRight,\n          paddingTop = _a.paddingTop;\n      return data.map(function (dataset, index) {\n        var result = _this.getBezierLinePoints(dataset, {\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop,\n          data: data\n        });\n\n        return _jsx(Path, {\n          d: result,\n          fill: \"none\",\n          stroke: _this.getColor(dataset, 0.2),\n          strokeWidth: _this.getStrokeWidth(dataset),\n          strokeDasharray: dataset.strokeDashArray,\n          strokeDashoffset: dataset.strokeDashOffset\n        }, index);\n      });\n    };\n\n    _this.renderBezierShadow = function (_a) {\n      var width = _a.width,\n          height = _a.height,\n          paddingRight = _a.paddingRight,\n          paddingTop = _a.paddingTop,\n          data = _a.data,\n          useColorFromDataset = _a.useColorFromDataset;\n      return data.map(function (dataset, index) {\n        var xMax = _this.getXMaxValues(data);\n\n        var d = _this.getBezierLinePoints(dataset, {\n          width: width,\n          height: height,\n          paddingRight: paddingRight,\n          paddingTop: paddingTop,\n          data: data\n        }) + (\" L\" + (paddingRight + (width - paddingRight) / xMax * (dataset.data.length - 1)) + \",\" + (height / 4 * 3 + paddingTop) + \" L\" + paddingRight + \",\" + (height / 4 * 3 + paddingTop) + \" Z\");\n        return _jsx(Path, {\n          d: d,\n          fill: \"url(#fillShadowGradientFrom\" + (useColorFromDataset ? \"_\" + index : \"\") + \")\",\n          strokeWidth: 0\n        }, index);\n      });\n    };\n\n    _this.renderLegend = function (width, legendOffset) {\n      var _a = _this.props.data,\n          legend = _a.legend,\n          datasets = _a.datasets;\n      var baseLegendItemX = width / (legend.length + 1);\n      return legend.map(function (legendItem, i) {\n        return _jsx(G, {\n          children: _jsx(LegendItem, {\n            index: i,\n            iconColor: _this.getColor(datasets[i], 0.9),\n            baseLegendItemX: baseLegendItemX,\n            legendText: legendItem,\n            labelProps: __assign({}, _this.getPropsForLabels()),\n            legendOffset: legendOffset\n          })\n        }, Math.random());\n      });\n    };\n\n    return _this;\n  }\n\n  LineChart.prototype.render = function () {\n    var _a = this.props,\n        width = _a.width,\n        height = _a.height,\n        data = _a.data,\n        _b = _a.withScrollableDot,\n        withScrollableDot = _b === void 0 ? false : _b,\n        _c = _a.withShadow,\n        withShadow = _c === void 0 ? true : _c,\n        _d = _a.withDots,\n        withDots = _d === void 0 ? true : _d,\n        _e = _a.withInnerLines,\n        withInnerLines = _e === void 0 ? true : _e,\n        _f = _a.withOuterLines,\n        withOuterLines = _f === void 0 ? true : _f,\n        _g = _a.withHorizontalLines,\n        withHorizontalLines = _g === void 0 ? true : _g,\n        _h = _a.withVerticalLines,\n        withVerticalLines = _h === void 0 ? true : _h,\n        _j = _a.withHorizontalLabels,\n        withHorizontalLabels = _j === void 0 ? true : _j,\n        _k = _a.withVerticalLabels,\n        withVerticalLabels = _k === void 0 ? true : _k,\n        _l = _a.style,\n        style = _l === void 0 ? {} : _l,\n        decorator = _a.decorator,\n        onDataPointClick = _a.onDataPointClick,\n        _m = _a.verticalLabelRotation,\n        verticalLabelRotation = _m === void 0 ? 0 : _m,\n        _o = _a.horizontalLabelRotation,\n        horizontalLabelRotation = _o === void 0 ? 0 : _o,\n        _p = _a.formatYLabel,\n        formatYLabel = _p === void 0 ? function (yLabel) {\n      return yLabel;\n    } : _p,\n        _q = _a.formatXLabel,\n        formatXLabel = _q === void 0 ? function (xLabel) {\n      return xLabel;\n    } : _q,\n        segments = _a.segments,\n        _r = _a.transparent,\n        transparent = _r === void 0 ? false : _r,\n        chartConfig = _a.chartConfig;\n    var scrollableDotHorizontalOffset = this.state.scrollableDotHorizontalOffset;\n    var _s = data.labels,\n        labels = _s === void 0 ? [] : _s;\n    var _t = style.borderRadius,\n        borderRadius = _t === void 0 ? 0 : _t,\n        _u = style.paddingTop,\n        paddingTop = _u === void 0 ? 16 : _u,\n        _v = style.paddingRight,\n        paddingRight = _v === void 0 ? 64 : _v,\n        _w = style.margin,\n        margin = _w === void 0 ? 0 : _w,\n        _x = style.marginRight,\n        marginRight = _x === void 0 ? 0 : _x,\n        _y = style.paddingBottom,\n        paddingBottom = _y === void 0 ? 0 : _y;\n    var config = {\n      width: width,\n      height: height,\n      verticalLabelRotation: verticalLabelRotation,\n      horizontalLabelRotation: horizontalLabelRotation\n    };\n    var datas = this.getDatas(data.datasets);\n    var count = Math.min.apply(Math, datas) === Math.max.apply(Math, datas) ? 1 : 4;\n\n    if (segments) {\n      count = segments;\n    }\n\n    var legendOffset = this.props.data.legend ? height * 0.15 : 0;\n    return _jsxs(View, {\n      style: style,\n      children: [_jsxs(Svg, {\n        height: height + paddingBottom + legendOffset,\n        width: width - margin * 2 - marginRight,\n        children: [_jsx(Rect, {\n          width: \"100%\",\n          height: height + legendOffset,\n          rx: borderRadius,\n          ry: borderRadius,\n          fill: \"url(#backgroundGradient)\",\n          fillOpacity: transparent ? 0 : 1\n        }), this.props.data.legend && this.renderLegend(config.width, legendOffset), _jsxs(G, {\n          x: \"0\",\n          y: legendOffset,\n          children: [this.renderDefs(__assign(__assign(__assign({}, config), chartConfig), {\n            data: data.datasets\n          })), _jsx(G, {\n            children: withHorizontalLines && (withInnerLines ? this.renderHorizontalLines(__assign(__assign({}, config), {\n              count: count,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight\n            })) : withOuterLines ? this.renderHorizontalLine(__assign(__assign({}, config), {\n              paddingTop: paddingTop,\n              paddingRight: paddingRight\n            })) : null)\n          }), _jsx(G, {\n            children: withHorizontalLabels && this.renderHorizontalLabels(__assign(__assign({}, config), {\n              count: count,\n              data: datas,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight,\n              formatYLabel: formatYLabel,\n              decimalPlaces: chartConfig.decimalPlaces\n            }))\n          }), _jsx(G, {\n            children: withVerticalLines && (withInnerLines ? this.renderVerticalLines(__assign(__assign({}, config), {\n              data: data.datasets[0].data,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight\n            })) : withOuterLines ? this.renderVerticalLine(__assign(__assign({}, config), {\n              paddingTop: paddingTop,\n              paddingRight: paddingRight\n            })) : null)\n          }), _jsx(G, {\n            children: withVerticalLabels && this.renderVerticalLabels(__assign(__assign({}, config), {\n              labels: labels,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight,\n              formatXLabel: formatXLabel\n            }))\n          }), _jsx(G, {\n            children: this.renderLine(__assign(__assign(__assign({}, config), chartConfig), {\n              paddingRight: paddingRight,\n              paddingTop: paddingTop,\n              data: data.datasets\n            }))\n          }), _jsx(G, {\n            children: withShadow && this.renderShadow(__assign(__assign({}, config), {\n              data: data.datasets,\n              paddingRight: paddingRight,\n              paddingTop: paddingTop,\n              useColorFromDataset: chartConfig.useShadowColorFromDataset\n            }))\n          }), _jsx(G, {\n            children: withDots && this.renderDots(__assign(__assign({}, config), {\n              data: data.datasets,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight,\n              onDataPointClick: onDataPointClick\n            }))\n          }), _jsx(G, {\n            children: withScrollableDot && this.renderScrollableDot(__assign(__assign(__assign({}, config), chartConfig), {\n              data: data.datasets,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight,\n              onDataPointClick: onDataPointClick,\n              scrollableDotHorizontalOffset: scrollableDotHorizontalOffset\n            }))\n          }), _jsx(G, {\n            children: decorator && decorator(__assign(__assign({}, config), {\n              data: data.datasets,\n              paddingTop: paddingTop,\n              paddingRight: paddingRight\n            }))\n          })]\n        })]\n      }), withScrollableDot && _jsx(ScrollView, {\n        style: StyleSheet.absoluteFill,\n        contentContainerStyle: {\n          width: width * 2\n        },\n        showsHorizontalScrollIndicator: false,\n        scrollEventThrottle: 16,\n        onScroll: Animated.event([{\n          nativeEvent: {\n            contentOffset: {\n              x: scrollableDotHorizontalOffset\n            }\n          }\n        }], {\n          useNativeDriver: false\n        }),\n        horizontal: true,\n        bounces: false\n      })]\n    });\n  };\n\n  return LineChart;\n}(AbstractChart);\n\nexport default LineChart;","map":{"version":3,"mappings":"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","names":["React","Circle","G","Path","Polygon","Polyline","Rect","Svg","AbstractChart","LegendItem","AnimatedCircle","Animated","createAnimatedComponent","__extends","_this","createRef","scrollableDotHorizontalOffset","Value","dataset","opacity","color","props","chartConfig","strokeWidth","data","reduce","acc","item","__spreadArrays","x","i","getDotProps","_b","r","propsForDots","_a","width","height","paddingTop","paddingRight","onDataPointClick","output","datas","getDatas","baseHeight","calcBaseHeight","getDotColor","_c","hidePointsAtIndex","_d","renderDotContent","xMax","getXMaxValues","forEach","withDots","includes","cx","cy","calcHeight","onPress","index","value","y","getColor","push","getPropsForDots","Math","random","indexData","scrollableDotFill","scrollableDotStrokeColor","scrollableDotStrokeWidth","scrollableDotRadius","scrollableInfoViewStyle","scrollableInfoTextStyle","scrollableInfoTextDecorator","scrollableInfoSize","scrollableInfoOffset","vl","perData","length","lastIndex","addListener","abs","floor","percent","label","current","setNativeProps","text","base","prev","rest","next","withScrollableDot","values","yValues","xValues","yValuesLabel","xValuesLabel","yval","xval","translateX","interpolate","inputRange","outputRange","extrapolate","translateY","labelTranslateX","labelTranslateY","transform","useColorFromDataset","bezier","renderBezierShadow","map","d","join","linejoinType","renderBezierLine","lastPoint","points","getStrokeWidth","strokeDashArray","strokeDashOffset","cur","yHeight","concat","slice","_","x_mid","y_mid","cp_x1","cp_x2","result","getBezierLinePoints","legendOffset","legend","datasets","baseLegendItemX","legendItem","__assign","getPropsForLabels","LineChart","withShadow","_e","withInnerLines","_f","withOuterLines","_g","withHorizontalLines","_h","withVerticalLines","_j","withHorizontalLabels","_k","withVerticalLabels","_l","style","decorator","_m","verticalLabelRotation","_o","horizontalLabelRotation","_p","formatYLabel","_q","formatXLabel","segments","_r","transparent","state","_s","_t","_u","_v","_w","margin","_x","marginRight","_y","paddingBottom","config","count","min","apply","max","borderRadius","renderLegend","renderDefs","renderHorizontalLines","renderHorizontalLine","renderHorizontalLabels","decimalPlaces","renderVerticalLines","renderVerticalLine","renderVerticalLabels","labels","renderLine","renderShadow","useShadowColorFromDataset","renderDots","renderScrollableDot","StyleSheet","absoluteFill","event","nativeEvent","contentOffset","useNativeDriver"],"sourceRoot":"","sources":["../../src/line-chart/LineChart.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport {\n  Animated,\n  ScrollView,\n  StyleSheet,\n  TextInput,\n  View,\n  ViewStyle\n} from \"react-native\";\nimport {\n  Circle,\n  G,\n  Path,\n  Polygon,\n  Polyline,\n  Rect,\n  Svg\n} from \"react-native-svg\";\n\nimport AbstractChart, {\n  AbstractChartConfig,\n  AbstractChartProps\n} from \"../AbstractChart\";\nimport { ChartData, Dataset } from \"../HelperTypes\";\nimport { LegendItem } from \"./LegendItem\";\n\nlet AnimatedCircle = Animated.createAnimatedComponent(Circle);\n\nexport interface LineChartData extends ChartData {\n  legend?: string[];\n}\n\nexport interface LineChartProps extends AbstractChartProps {\n  /**\n   * Data for the chart.\n   *\n   * Example from [docs](https://github.com/indiespirit/react-native-chart-kit#line-chart):\n   *\n   * ```javascript\n   * const data = {\n   *   labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n   *   datasets: [{\n   *     data: [ 20, 45, 28, 80, 99, 43 ],\n   *     color: (opacity = 1) => `rgba(134, 65, 244, ${opacity})`, // optional\n   *     strokeWidth: 2 // optional\n   *   }],\n   *   legend: [\"Rainy Days\", \"Sunny Days\", \"Snowy Days\"] // optional\n   * }\n   * ```\n   */\n  data: LineChartData;\n  /**\n   * Width of the chart, use 'Dimensions' library to get the width of your screen for responsive.\n   */\n  width: number;\n  /**\n   * Height of the chart.\n   */\n  height: number;\n  /**\n   * Show dots on the line - default: True.\n   */\n  withDots?: boolean;\n  /**\n   * Show shadow for line - default: True.\n   */\n  withShadow?: boolean;\n  /**\n   * Show inner dashed lines - default: True.\n   */\n\n  withScrollableDot?: boolean;\n  withInnerLines?: boolean;\n  /**\n   * Show outer dashed lines - default: True.\n   */\n  withOuterLines?: boolean;\n  /**\n   * Show vertical lines - default: True.\n   */\n  withVerticalLines?: boolean;\n  /**\n   * Show horizontal lines - default: True.\n   */\n  withHorizontalLines?: boolean;\n  /**\n   * Show vertical labels - default: True.\n   */\n  withVerticalLabels?: boolean;\n  /**\n   * Show horizontal labels - default: True.\n   */\n  withHorizontalLabels?: boolean;\n  /**\n   * Render charts from 0 not from the minimum value. - default: False.\n   */\n  fromZero?: boolean;\n  /**\n   * Prepend text to horizontal labels -- default: ''.\n   */\n  yAxisLabel?: string;\n  /**\n   * Append text to horizontal labels -- default: ''.\n   */\n  yAxisSuffix?: string;\n  /**\n   * Prepend text to vertical labels -- default: ''.\n   */\n  xAxisLabel?: string;\n  /**\n   * Configuration object for the chart, see example:\n   *\n   * ```javascript\n   * const chartConfig = {\n   *   backgroundGradientFrom: \"#1E2923\",\n   *   backgroundGradientFromOpacity: 0,\n   *   backgroundGradientTo: \"#08130D\",\n   *   backgroundGradientToOpacity: 0.5,\n   *   color: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,\n   *   labelColor: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,\n   *   strokeWidth: 2, // optional, default 3\n   *   barPercentage: 0.5\n   * };\n   * ```\n   */\n  chartConfig?: AbstractChartConfig;\n\n  /**\n   * Divide axis quantity by the input number -- default: 1.\n   */\n  yAxisInterval?: number;\n\n  /**\n   * Defines if chart is transparent\n   */\n  transparent?: boolean;\n  /**\n   * This function takes a [whole bunch](https://github.com/indiespirit/react-native-chart-kit/blob/master/src/line-chart.js#L266)\n   * of stuff and can render extra elements,\n   * such as data point info or additional markup.\n   */\n  decorator?: Function;\n  /**\n   * Callback that is called when a data point is clicked.\n   */\n  onDataPointClick?: (data: {\n    index: number;\n    value: number;\n    dataset: Dataset;\n    x: number;\n    y: number;\n    getColor: (opacity: number) => string;\n  }) => void;\n  /**\n   * Style of the container view of the chart.\n   */\n  style?: Partial<ViewStyle>;\n  /**\n   * Add this prop to make the line chart smooth and curvy.\n   *\n   * [Example](https://github.com/indiespirit/react-native-chart-kit#bezier-line-chart)\n   */\n  bezier?: boolean;\n  /**\n   * Defines the dot color function that is used to calculate colors of dots in a line chart.\n   * Takes `(dataPoint, dataPointIndex)` as arguments.\n   */\n  getDotColor?: (dataPoint: any, index: number) => string;\n  /**\n   * Renders additional content for dots in a line chart.\n   * Takes `({x, y, index})` as arguments.\n   */\n  renderDotContent?: (params: {\n    x: number;\n    y: number;\n    index: number;\n    indexData: number;\n  }) => React.ReactNode;\n  /**\n   * Rotation angle of the horizontal labels - default 0 (degrees).\n   */\n  horizontalLabelRotation?: number;\n  /**\n   * Rotation angle of the vertical labels - default 0 (degrees).\n   */\n  verticalLabelRotation?: number;\n  /**\n   * Offset for Y axis labels.\n   */\n  yLabelsOffset?: number;\n  /**\n   * Offset for X axis labels.\n   */\n  xLabelsOffset?: number;\n  /**\n   * Array of indices of the data points you don't want to display.\n   */\n  hidePointsAtIndex?: number[];\n  /**\n   * This function change the format of the display value of the Y label.\n   * Takes the y value as argument and should return the desirable string.\n   */\n  formatYLabel?: (yValue: string) => string;\n  /**\n   * This function change the format of the display value of the X label.\n   * Takes the X value as argument and should return the desirable string.\n   */\n  formatXLabel?: (xValue: string) => string;\n  /**\n   * Provide props for a data point dot.\n   */\n  getDotProps?: (dataPoint: any, index: number) => object;\n  /**\n   * The number of horizontal lines\n   */\n  segments?: number;\n}\n\ntype LineChartState = {\n  scrollableDotHorizontalOffset: Animated.Value;\n};\n\nclass LineChart extends AbstractChart<LineChartProps, LineChartState> {\n  label = React.createRef<TextInput>();\n\n  state = {\n    scrollableDotHorizontalOffset: new Animated.Value(0)\n  };\n\n  getColor = (dataset: Dataset, opacity: number) => {\n    return (dataset.color || this.props.chartConfig.color)(opacity);\n  };\n\n  getStrokeWidth = (dataset: Dataset) => {\n    return dataset.strokeWidth || this.props.chartConfig.strokeWidth || 3;\n  };\n\n  getDatas = (data: Dataset[]): number[] => {\n    return data.reduce(\n      (acc, item) => (item.data ? [...acc, ...item.data] : acc),\n      []\n    );\n  };\n\n  getPropsForDots = (x: any, i: number) => {\n    const { getDotProps, chartConfig } = this.props;\n\n    if (typeof getDotProps === \"function\") {\n      return getDotProps(x, i);\n    }\n\n    const { propsForDots = {} } = chartConfig;\n\n    return { r: \"4\", ...propsForDots };\n  };\n\n  renderDots = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight,\n    onDataPointClick\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    onDataPointClick: LineChartProps[\"onDataPointClick\"];\n  }) => {\n    const output: ReactNode[] = [];\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    const {\n      getDotColor,\n      hidePointsAtIndex = [],\n      renderDotContent = () => {\n        return null;\n      }\n    } = this.props;\n    const xMax = this.getXMaxValues(data);\n    data.forEach(dataset => {\n      if (dataset.withDots == false) return;\n\n      dataset.data.forEach((x, i) => {\n        if (hidePointsAtIndex.includes(i)) {\n          return;\n        }\n\n        const cx = paddingRight + (i * (width - paddingRight)) / xMax;\n\n        const cy =\n          ((baseHeight - this.calcHeight(x, datas, height)) / 4) * 3 +\n          paddingTop;\n\n        const onPress = () => {\n          if (!onDataPointClick || hidePointsAtIndex.includes(i)) {\n            return;\n          }\n\n          onDataPointClick({\n            index: i,\n            value: x,\n            dataset,\n            x: cx,\n            y: cy,\n            getColor: opacity => this.getColor(dataset, opacity)\n          });\n        };\n\n        output.push(\n          <Circle\n            key={Math.random()}\n            cx={cx}\n            cy={cy}\n            fill={\n              typeof getDotColor === \"function\"\n                ? getDotColor(x, i)\n                : this.getColor(dataset, 0.9)\n            }\n            onPress={onPress}\n            {...this.getPropsForDots(x, i)}\n          />,\n          <Circle\n            key={Math.random()}\n            cx={cx}\n            cy={cy}\n            r=\"14\"\n            fill=\"#fff\"\n            fillOpacity={0}\n            onPress={onPress}\n          />,\n          renderDotContent({ x: cx, y: cy, index: i, indexData: x })\n        );\n      });\n    });\n\n    return output;\n  };\n\n  renderScrollableDot = ({\n    data,\n    width,\n    height,\n    paddingTop,\n    paddingRight,\n    scrollableDotHorizontalOffset,\n    scrollableDotFill,\n    scrollableDotStrokeColor,\n    scrollableDotStrokeWidth,\n    scrollableDotRadius,\n    scrollableInfoViewStyle,\n    scrollableInfoTextStyle,\n    scrollableInfoTextDecorator = x => `${x}`,\n    scrollableInfoSize,\n    scrollableInfoOffset\n  }: AbstractChartConfig & {\n    onDataPointClick: LineChartProps[\"onDataPointClick\"];\n    scrollableDotHorizontalOffset: Animated.Value;\n  }) => {\n    const output = [];\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    let vl: number[] = [];\n\n    const perData = width / data[0].data.length;\n    for (let index = 0; index < data[0].data.length; index++) {\n      vl.push(index * perData);\n    }\n    let lastIndex: number;\n\n    scrollableDotHorizontalOffset.addListener(value => {\n      const index = value.value / perData;\n      if (!lastIndex) {\n        lastIndex = index;\n      }\n\n      let abs = Math.floor(index);\n      let percent = index - abs;\n      abs = data[0].data.length - abs - 1;\n\n      if (index >= data[0].data.length - 1) {\n        this.label.current.setNativeProps({\n          text: scrollableInfoTextDecorator(Math.floor(data[0].data[0]))\n        });\n      } else {\n        if (index > lastIndex) {\n          // to right\n\n          const base = data[0].data[abs];\n          const prev = data[0].data[abs - 1];\n          if (prev > base) {\n            let rest = prev - base;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base + percent * rest)\n              )\n            });\n          } else {\n            let rest = base - prev;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base - percent * rest)\n              )\n            });\n          }\n        } else {\n          // to left\n\n          const base = data[0].data[abs - 1];\n          const next = data[0].data[abs];\n          percent = 1 - percent;\n          if (next > base) {\n            let rest = next - base;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base + percent * rest)\n              )\n            });\n          } else {\n            let rest = base - next;\n            this.label.current.setNativeProps({\n              text: scrollableInfoTextDecorator(\n                Math.floor(base - percent * rest)\n              )\n            });\n          }\n        }\n      }\n      lastIndex = index;\n    });\n\n    data.forEach(dataset => {\n      if (dataset.withScrollableDot == false) return;\n\n      const perData = width / dataset.data.length;\n      let values = [];\n      let yValues = [];\n      let xValues = [];\n\n      let yValuesLabel = [];\n      let xValuesLabel = [];\n\n      for (let index = 0; index < dataset.data.length; index++) {\n        values.push(index * perData);\n        const yval =\n          ((baseHeight -\n            this.calcHeight(\n              dataset.data[dataset.data.length - index - 1],\n              datas,\n              height\n            )) /\n            4) *\n            3 +\n          paddingTop;\n        yValues.push(yval);\n        const xval =\n          paddingRight +\n          ((dataset.data.length - index - 1) * (width - paddingRight)) /\n            dataset.data.length;\n        xValues.push(xval);\n\n        yValuesLabel.push(\n          yval - (scrollableInfoSize.height + scrollableInfoOffset)\n        );\n        xValuesLabel.push(xval - scrollableInfoSize.width / 2);\n      }\n\n      const translateX = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: xValues,\n        extrapolate: \"clamp\"\n      });\n\n      const translateY = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: yValues,\n        extrapolate: \"clamp\"\n      });\n\n      const labelTranslateX = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: xValuesLabel,\n        extrapolate: \"clamp\"\n      });\n\n      const labelTranslateY = scrollableDotHorizontalOffset.interpolate({\n        inputRange: values,\n        outputRange: yValuesLabel,\n        extrapolate: \"clamp\"\n      });\n\n      output.push([\n        <Animated.View\n          key={Math.random()}\n          style={[\n            scrollableInfoViewStyle,\n            {\n              transform: [\n                { translateX: labelTranslateX },\n                { translateY: labelTranslateY }\n              ],\n              width: scrollableInfoSize.width,\n              height: scrollableInfoSize.height\n            }\n          ]}\n        >\n          <TextInput\n            onLayout={() => {\n              this.label.current.setNativeProps({\n                text: scrollableInfoTextDecorator(\n                  Math.floor(data[0].data[data[0].data.length - 1])\n                )\n              });\n            }}\n            style={scrollableInfoTextStyle}\n            ref={this.label}\n          />\n        </Animated.View>,\n        <AnimatedCircle\n          key={Math.random()}\n          cx={translateX}\n          cy={translateY}\n          r={scrollableDotRadius}\n          stroke={scrollableDotStrokeColor}\n          strokeWidth={scrollableDotStrokeWidth}\n          fill={scrollableDotFill}\n        />\n      ]);\n    });\n\n    return output;\n  };\n\n  renderShadow = ({\n    width,\n    height,\n    paddingRight,\n    paddingTop,\n    data,\n    useColorFromDataset\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    useColorFromDataset: AbstractChartConfig[\"useShadowColorFromDataset\"];\n  }) => {\n    if (this.props.bezier) {\n      return this.renderBezierShadow({\n        width,\n        height,\n        paddingRight,\n        paddingTop,\n        data,\n        useColorFromDataset\n      });\n    }\n\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    return data.map((dataset, index) => {\n      return (\n        <Polygon\n          key={index}\n          points={\n            dataset.data\n              .map((d, i) => {\n                const x =\n                  paddingRight +\n                  (i * (width - paddingRight)) / dataset.data.length;\n\n                const y =\n                  ((baseHeight - this.calcHeight(d, datas, height)) / 4) * 3 +\n                  paddingTop;\n\n                return `${x},${y}`;\n              })\n              .join(\" \") +\n            ` ${paddingRight +\n              ((width - paddingRight) / dataset.data.length) *\n                (dataset.data.length - 1)},${(height / 4) * 3 +\n              paddingTop} ${paddingRight},${(height / 4) * 3 + paddingTop}`\n          }\n          fill={`url(#fillShadowGradientFrom${\n            useColorFromDataset ? `_${index}` : \"\"\n          })`}\n          strokeWidth={0}\n        />\n      );\n    });\n  };\n\n  renderLine = ({\n    width,\n    height,\n    paddingRight,\n    paddingTop,\n    data,\n    linejoinType\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\" | \"linejoinType\"\n  >) => {\n    if (this.props.bezier) {\n      return this.renderBezierLine({\n        data,\n        width,\n        height,\n        paddingRight,\n        paddingTop\n      });\n    }\n\n    const output = [];\n    const datas = this.getDatas(data);\n    const baseHeight = this.calcBaseHeight(datas, height);\n    const xMax = this.getXMaxValues(data);\n\n    let lastPoint: string;\n\n    data.forEach((dataset, index) => {\n      const points = dataset.data.map((d, i) => {\n        if (d === null) return lastPoint;\n        const x = (i * (width - paddingRight)) / xMax + paddingRight;\n        const y =\n          ((baseHeight - this.calcHeight(d, datas, height)) / 4) * 3 +\n          paddingTop;\n        lastPoint = `${x},${y}`;\n        return `${x},${y}`;\n      });\n\n      output.push(\n        <Polyline\n          key={index}\n          strokeLinejoin={linejoinType}\n          points={points.join(\" \")}\n          fill=\"none\"\n          stroke={this.getColor(dataset, 0.2)}\n          strokeWidth={this.getStrokeWidth(dataset)}\n          strokeDasharray={dataset.strokeDashArray}\n          strokeDashoffset={dataset.strokeDashOffset}\n        />\n      );\n    });\n\n    return output;\n  };\n\n  getXMaxValues = (data: Dataset[]) => {\n    return data.reduce((acc, cur) => {\n      return cur.data.length > acc ? cur.data.length : acc;\n    }, 0);\n  };\n\n  getBezierLinePoints = (\n    dataset: Dataset,\n    {\n      width,\n      height,\n      paddingRight,\n      paddingTop,\n      data\n    }: Pick<\n      AbstractChartConfig,\n      \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\" | \"data\"\n    >\n  ) => {\n    if (dataset.data.length === 0) {\n      return \"M0,0\";\n    }\n\n    const datas = this.getDatas(data);\n    const xMax = this.getXMaxValues(data);\n\n    const x = (i: number) =>\n      Math.floor(paddingRight + (i * (width - paddingRight)) / xMax);\n\n    const baseHeight = this.calcBaseHeight(datas, height);\n\n    const y = (i: number) => {\n      const yHeight = this.calcHeight(dataset.data[i], datas, height);\n\n      return Math.floor(((baseHeight - yHeight) / 4) * 3 + paddingTop);\n    };\n\n    return [`M${x(0)},${y(0)}`]\n      .concat(\n        dataset.data.slice(0, -1).map((_, i) => {\n          const x_mid = (x(i) + x(i + 1)) / 2;\n          const y_mid = (y(i) + y(i + 1)) / 2;\n          const cp_x1 = (x_mid + x(i)) / 2;\n          const cp_x2 = (x_mid + x(i + 1)) / 2;\n          return (\n            `Q ${cp_x1}, ${y(i)}, ${x_mid}, ${y_mid}` +\n            ` Q ${cp_x2}, ${y(i + 1)}, ${x(i + 1)}, ${y(i + 1)}`\n          );\n        })\n      )\n      .join(\" \");\n  };\n\n  renderBezierLine = ({\n    data,\n    width,\n    height,\n    paddingRight,\n    paddingTop\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  >) => {\n    return data.map((dataset, index) => {\n      const result = this.getBezierLinePoints(dataset, {\n        width,\n        height,\n        paddingRight,\n        paddingTop,\n        data\n      });\n\n      return (\n        <Path\n          key={index}\n          d={result}\n          fill=\"none\"\n          stroke={this.getColor(dataset, 0.2)}\n          strokeWidth={this.getStrokeWidth(dataset)}\n          strokeDasharray={dataset.strokeDashArray}\n          strokeDashoffset={dataset.strokeDashOffset}\n        />\n      );\n    });\n  };\n\n  renderBezierShadow = ({\n    width,\n    height,\n    paddingRight,\n    paddingTop,\n    data,\n    useColorFromDataset\n  }: Pick<\n    AbstractChartConfig,\n    \"data\" | \"width\" | \"height\" | \"paddingRight\" | \"paddingTop\"\n  > & {\n    useColorFromDataset: AbstractChartConfig[\"useShadowColorFromDataset\"];\n  }) =>\n    data.map((dataset, index) => {\n      const xMax = this.getXMaxValues(data);\n      const d =\n        this.getBezierLinePoints(dataset, {\n          width,\n          height,\n          paddingRight,\n          paddingTop,\n          data\n        }) +\n        ` L${paddingRight +\n          ((width - paddingRight) / xMax) *\n            (dataset.data.length - 1)},${(height / 4) * 3 +\n          paddingTop} L${paddingRight},${(height / 4) * 3 + paddingTop} Z`;\n\n      return (\n        <Path\n          key={index}\n          d={d}\n          fill={`url(#fillShadowGradientFrom${\n            useColorFromDataset ? `_${index}` : \"\"\n          })`}\n          strokeWidth={0}\n        />\n      );\n    });\n\n  renderLegend = (width, legendOffset) => {\n    const { legend, datasets } = this.props.data;\n    const baseLegendItemX = width / (legend.length + 1);\n\n    return legend.map((legendItem, i) => (\n      <G key={Math.random()}>\n        <LegendItem\n          index={i}\n          iconColor={this.getColor(datasets[i], 0.9)}\n          baseLegendItemX={baseLegendItemX}\n          legendText={legendItem}\n          labelProps={{ ...this.getPropsForLabels() }}\n          legendOffset={legendOffset}\n        />\n      </G>\n    ));\n  };\n\n  render() {\n    const {\n      width,\n      height,\n      data,\n      withScrollableDot = false,\n      withShadow = true,\n      withDots = true,\n      withInnerLines = true,\n      withOuterLines = true,\n      withHorizontalLines = true,\n      withVerticalLines = true,\n      withHorizontalLabels = true,\n      withVerticalLabels = true,\n      style = {},\n      decorator,\n      onDataPointClick,\n      verticalLabelRotation = 0,\n      horizontalLabelRotation = 0,\n      formatYLabel = yLabel => yLabel,\n      formatXLabel = xLabel => xLabel,\n      segments,\n      transparent = false,\n      chartConfig\n    } = this.props;\n\n    const { scrollableDotHorizontalOffset } = this.state;\n    const { labels = [] } = data;\n    const {\n      borderRadius = 0,\n      paddingTop = 16,\n      paddingRight = 64,\n      margin = 0,\n      marginRight = 0,\n      paddingBottom = 0\n    } = style;\n\n    const config = {\n      width,\n      height,\n      verticalLabelRotation,\n      horizontalLabelRotation\n    };\n\n    const datas = this.getDatas(data.datasets);\n\n    let count = Math.min(...datas) === Math.max(...datas) ? 1 : 4;\n    if (segments) {\n      count = segments;\n    }\n\n    const legendOffset = this.props.data.legend ? height * 0.15 : 0;\n\n    return (\n      <View style={style}>\n        <Svg\n          height={height + (paddingBottom as number) + legendOffset}\n          width={width - (margin as number) * 2 - (marginRight as number)}\n        >\n          <Rect\n            width=\"100%\"\n            height={height + legendOffset}\n            rx={borderRadius}\n            ry={borderRadius}\n            fill=\"url(#backgroundGradient)\"\n            fillOpacity={transparent ? 0 : 1}\n          />\n          {this.props.data.legend &&\n            this.renderLegend(config.width, legendOffset)}\n          <G x=\"0\" y={legendOffset}>\n            {this.renderDefs({\n              ...config,\n              ...chartConfig,\n              data: data.datasets\n            })}\n            <G>\n              {withHorizontalLines &&\n                (withInnerLines\n                  ? this.renderHorizontalLines({\n                      ...config,\n                      count: count,\n                      paddingTop,\n                      paddingRight\n                    })\n                  : withOuterLines\n                  ? this.renderHorizontalLine({\n                      ...config,\n                      paddingTop,\n                      paddingRight\n                    })\n                  : null)}\n            </G>\n            <G>\n              {withHorizontalLabels &&\n                this.renderHorizontalLabels({\n                  ...config,\n                  count: count,\n                  data: datas,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  formatYLabel,\n                  decimalPlaces: chartConfig.decimalPlaces\n                })}\n            </G>\n            <G>\n              {withVerticalLines &&\n                (withInnerLines\n                  ? this.renderVerticalLines({\n                      ...config,\n                      data: data.datasets[0].data,\n                      paddingTop: paddingTop as number,\n                      paddingRight: paddingRight as number\n                    })\n                  : withOuterLines\n                  ? this.renderVerticalLine({\n                      ...config,\n                      paddingTop: paddingTop as number,\n                      paddingRight: paddingRight as number\n                    })\n                  : null)}\n            </G>\n            <G>\n              {withVerticalLabels &&\n                this.renderVerticalLabels({\n                  ...config,\n                  labels,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  formatXLabel\n                })}\n            </G>\n            <G>\n              {this.renderLine({\n                ...config,\n                ...chartConfig,\n                paddingRight: paddingRight as number,\n                paddingTop: paddingTop as number,\n                data: data.datasets\n              })}\n            </G>\n            <G>\n              {withShadow &&\n                this.renderShadow({\n                  ...config,\n                  data: data.datasets,\n                  paddingRight: paddingRight as number,\n                  paddingTop: paddingTop as number,\n                  useColorFromDataset: chartConfig.useShadowColorFromDataset\n                })}\n            </G>\n            <G>\n              {withDots &&\n                this.renderDots({\n                  ...config,\n                  data: data.datasets,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  onDataPointClick\n                })}\n            </G>\n            <G>\n              {withScrollableDot &&\n                this.renderScrollableDot({\n                  ...config,\n                  ...chartConfig,\n                  data: data.datasets,\n                  paddingTop: paddingTop as number,\n                  paddingRight: paddingRight as number,\n                  onDataPointClick,\n                  scrollableDotHorizontalOffset\n                })}\n            </G>\n            <G>\n              {decorator &&\n                decorator({\n                  ...config,\n                  data: data.datasets,\n                  paddingTop,\n                  paddingRight\n                })}\n            </G>\n          </G>\n        </Svg>\n        {withScrollableDot && (\n          <ScrollView\n            style={StyleSheet.absoluteFill}\n            contentContainerStyle={{ width: width * 2 }}\n            showsHorizontalScrollIndicator={false}\n            scrollEventThrottle={16}\n            onScroll={Animated.event([\n              {\n                nativeEvent: {\n                  contentOffset: { x: scrollableDotHorizontalOffset }\n                }\n              }\n            ], { useNativeDriver: false }\n            )}\n            horizontal\n            bounces={false}\n          />\n        )}\n      </View>\n    );\n  }\n}\n\nexport default LineChart;\n"]},"metadata":{},"sourceType":"module"}