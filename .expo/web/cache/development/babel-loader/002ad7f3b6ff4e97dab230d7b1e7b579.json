{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport { CryptoEncoding } from \"./Crypto.types\";\nexport default {\n  get name() {\n    return 'ExpoCrypto';\n  },\n\n  digestStringAsync: function () {\n    var _digestStringAsync = _asyncToGenerator(function* (algorithm, data, options) {\n      if (!crypto.subtle) {\n        throw new CodedError('ERR_CRYPTO_UNAVAILABLE', 'Access to the WebCrypto API is restricted to secure origins (https).');\n      }\n\n      var encoder = new TextEncoder();\n      var buffer = encoder.encode(data);\n      var hashedData = yield crypto.subtle.digest(algorithm, buffer);\n\n      if (options.encoding === CryptoEncoding.HEX) {\n        return hexString(hashedData);\n      } else if (options.encoding === CryptoEncoding.BASE64) {\n        return btoa(String.fromCharCode.apply(String, _toConsumableArray(new Uint8Array(hashedData))));\n      }\n\n      throw new CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n    });\n\n    function digestStringAsync(_x, _x2, _x3) {\n      return _digestStringAsync.apply(this, arguments);\n    }\n\n    return digestStringAsync;\n  }()\n};\n\nfunction hexString(buffer) {\n  var byteArray = new Uint8Array(buffer);\n\n  var hexCodes = _toConsumableArray(byteArray).map(function (value) {\n    var hexCode = value.toString(16);\n    var paddedHexCode = hexCode.padStart(2, '0');\n    return paddedHexCode;\n  });\n\n  return hexCodes.join('');\n}","map":{"version":3,"mappings":";;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AAEA,SAAgCC,cAAhC;AAEA,eAAe;EACb,IAAIC,IAAJ,GAAQ;IACN,OAAO,YAAP;EACD,CAHY;;EAIPC,iBAJO;IAAA,sDAKXC,SALW,EAMXC,IANW,EAOXC,OAPW,EAOiB;MAE5B,IAAI,CAACC,MAAM,CAACC,MAAZ,EAAoB;QAClB,MAAM,IAAIR,UAAJ,CACJ,wBADI,EAEJ,sEAFI,CAAN;MAID;;MACD,IAAMS,OAAO,GAAG,IAAIC,WAAJ,EAAhB;MACA,IAAMC,MAAM,GAAGF,OAAO,CAACG,MAAR,CAAeP,IAAf,CAAf;MACA,IAAMQ,UAAU,SAASN,MAAM,CAACC,MAAP,CAAcM,MAAd,CAAqBV,SAArB,EAAgCO,MAAhC,CAAzB;;MACA,IAAIL,OAAO,CAACS,QAAR,KAAqBd,cAAc,CAACe,GAAxC,EAA6C;QAC3C,OAAOC,SAAS,CAACJ,UAAD,CAAhB;MACD,CAFD,MAEO,IAAIP,OAAO,CAACS,QAAR,KAAqBd,cAAc,CAACiB,MAAxC,EAAgD;QACrD,OAAOC,IAAI,CAACC,MAAM,CAACC,YAAP,aAAM,qBAAiB,IAAIC,UAAJ,CAAeT,UAAf,CAAjB,EAAP,CAAX;MACD;;MACD,MAAM,IAAIb,UAAJ,CAAe,mBAAf,EAAoC,iCAApC,CAAN;IACD,CAxBY;;IAAA;MAAA;IAAA;;IAAA;EAAA;AAAA,CAAf;;AA2BA,SAASiB,SAAT,CAAmBN,MAAnB,EAAsC;EACpC,IAAMY,SAAS,GAAG,IAAID,UAAJ,CAAeX,MAAf,CAAlB;;EAEA,IAAMa,QAAQ,GAAG,mBAAID,SAAJ,EAAeE,GAAf,CAAmB,UAACC,KAAD,EAAU;IAC5C,IAAMC,OAAO,GAAGD,KAAK,CAACE,QAAN,CAAe,EAAf,CAAhB;IACA,IAAMC,aAAa,GAAGF,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoB,GAApB,CAAtB;IACA,OAAOD,aAAP;EACD,CAJgB,CAAjB;;EAMA,OAAOL,QAAQ,CAACO,IAAT,CAAc,EAAd,CAAP;AACD","names":["CodedError","CryptoEncoding","name","digestStringAsync","algorithm","data","options","crypto","subtle","encoder","TextEncoder","buffer","encode","hashedData","digest","encoding","HEX","hexString","BASE64","btoa","String","fromCharCode","Uint8Array","byteArray","hexCodes","map","value","hexCode","toString","paddedHexCode","padStart","join"],"sourceRoot":"","sources":["../src/ExpoCrypto.web.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { CryptoDigestAlgorithm, CryptoEncoding, CryptoDigestOptions } from './Crypto.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoCrypto';\n  },\n  async digestStringAsync(\n    algorithm: CryptoDigestAlgorithm,\n    data: string,\n    options: CryptoDigestOptions\n  ): Promise<string> {\n    if (!crypto.subtle) {\n      throw new CodedError(\n        'ERR_CRYPTO_UNAVAILABLE',\n        'Access to the WebCrypto API is restricted to secure origins (https).'\n      );\n    }\n    const encoder = new TextEncoder();\n    const buffer = encoder.encode(data);\n    const hashedData = await crypto.subtle.digest(algorithm, buffer);\n    if (options.encoding === CryptoEncoding.HEX) {\n      return hexString(hashedData);\n    } else if (options.encoding === CryptoEncoding.BASE64) {\n      return btoa(String.fromCharCode(...new Uint8Array(hashedData)));\n    }\n    throw new CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n  },\n};\n\nfunction hexString(buffer: ArrayBuffer): string {\n  const byteArray = new Uint8Array(buffer);\n\n  const hexCodes = [...byteArray].map((value) => {\n    const hexCode = value.toString(16);\n    const paddedHexCode = hexCode.padStart(2, '0');\n    return paddedHexCode;\n  });\n\n  return hexCodes.join('');\n}\n"]},"metadata":{},"sourceType":"module"}