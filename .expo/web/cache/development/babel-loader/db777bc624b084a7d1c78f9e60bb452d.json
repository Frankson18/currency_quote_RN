{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport Pie from \"paths-js/pie\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { G, Path, Rect, Svg, Text } from \"react-native-svg\";\nimport AbstractChart from \"./AbstractChart\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar PieChart = function (_super) {\n  __extends(PieChart, _super);\n\n  function PieChart() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PieChart.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.style,\n        style = _b === void 0 ? {} : _b,\n        backgroundColor = _a.backgroundColor,\n        _c = _a.absolute,\n        absolute = _c === void 0 ? false : _c,\n        _d = _a.hasLegend,\n        hasLegend = _d === void 0 ? true : _d,\n        _e = _a.avoidFalseZero,\n        avoidFalseZero = _e === void 0 ? false : _e;\n    var _f = style.borderRadius,\n        borderRadius = _f === void 0 ? 0 : _f;\n    var chart = Pie({\n      center: this.props.center || [0, 0],\n      r: 0,\n      R: this.props.height / 2.5,\n      data: this.props.data,\n      accessor: function accessor(x) {\n        return x[_this.props.accessor];\n      }\n    });\n    var total = this.props.data.reduce(function (sum, item) {\n      return sum + item[_this.props.accessor];\n    }, 0);\n    var slices = chart.curves.map(function (c, i) {\n      var value;\n\n      if (absolute) {\n        value = c.item[_this.props.accessor];\n      } else {\n        if (total === 0) {\n          value = 0 + \"%\";\n        } else {\n          var percentage = Math.round(100 / total * c.item[_this.props.accessor]);\n          value = Math.round(100 / total * c.item[_this.props.accessor]) + \"%\";\n\n          if (avoidFalseZero && percentage === 0) {\n            value = \"<1%\";\n          } else {\n            value = percentage + \"%\";\n          }\n        }\n      }\n\n      return _jsxs(G, {\n        children: [_jsx(Path, {\n          d: c.sector.path.print(),\n          fill: c.item.color\n        }), hasLegend ? _jsx(Rect, {\n          width: \"16px\",\n          height: \"16px\",\n          fill: c.item.color,\n          rx: 8,\n          ry: 8,\n          x: _this.props.width / 2.5 - 24,\n          y: -(_this.props.height / 2.5) + _this.props.height * 0.8 / _this.props.data.length * i + 12\n        }) : null, hasLegend ? _jsx(Text, {\n          fill: c.item.legendFontColor,\n          fontSize: c.item.legendFontSize,\n          fontFamily: c.item.legendFontFamily,\n          x: _this.props.width / 2.5,\n          y: -(_this.props.height / 2.5) + _this.props.height * 0.8 / _this.props.data.length * i + 12 * 2,\n          children: value + \" \" + c.item.name\n        }) : null]\n      }, Math.random());\n    });\n    return _jsx(View, {\n      style: __assign({\n        width: this.props.width,\n        height: this.props.height,\n        padding: 0\n      }, style),\n      children: _jsxs(Svg, {\n        width: this.props.width,\n        height: this.props.height,\n        children: [_jsx(G, {\n          children: this.renderDefs(__assign({\n            width: this.props.height,\n            height: this.props.height\n          }, this.props.chartConfig))\n        }), _jsx(Rect, {\n          width: \"100%\",\n          height: this.props.height,\n          rx: borderRadius,\n          ry: borderRadius,\n          fill: backgroundColor\n        }), _jsx(G, {\n          x: this.props.width / 2 / 2 + Number(this.props.paddingLeft ? this.props.paddingLeft : 0),\n          y: this.props.height / 2,\n          children: slices\n        })]\n      })\n    });\n  };\n\n  return PieChart;\n}(AbstractChart);\n\nexport default PieChart;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,CAAT,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,GAAxB,EAA6BC,IAA7B,QAAyC,kBAAzC;AAEA,OAAOC,aAAP;;;;AAkBA;EAAuBC;;EAAvB;;EAyHC;;EAxHCC;IAAA;;IACQ,SAMF,KAAKC,KANH;IAAA,IACJC,aADI;IAAA,IACJC,KAAK,mBAAG,EAAH,GAAKD,EADN;IAAA,IAEJE,eAAe,qBAFX;IAAA,IAGJC,gBAHI;IAAA,IAGJC,QAAQ,mBAAG,KAAH,GAAQD,EAHZ;IAAA,IAIJE,iBAJI;IAAA,IAIJC,SAAS,mBAAG,IAAH,GAAOD,EAJZ;IAAA,IAKJE,sBALI;IAAA,IAKJC,cAAc,mBAAG,KAAH,GAAQD,EALlB;IAQE,SAAqBN,KAAK,aAA1B;IAAA,gBAAY,mBAAG,CAAH,GAAIQ,EAAhB;IAER,IAAMC,KAAK,GAAGrB,GAAG,CAAC;MAChBsB,MAAM,EAAE,KAAKZ,KAAL,CAAWY,MAAX,IAAqB,CAAC,CAAD,EAAI,CAAJ,CADb;MAEhBC,CAAC,EAAE,CAFa;MAGhBC,CAAC,EAAE,KAAKd,KAAL,CAAWe,MAAX,GAAoB,GAHP;MAIhBC,IAAI,EAAE,KAAKhB,KAAL,CAAWgB,IAJD;MAKhBC,QAAQ,EAAE,qBAAC;QACT,OAAOC,CAAC,CAACC,KAAI,CAACnB,KAAL,CAAWiB,QAAZ,CAAR;MACD;IAPe,CAAD,CAAjB;IAUA,IAAMG,KAAK,GAAG,KAAKpB,KAAL,CAAWgB,IAAX,CAAgBK,MAAhB,CAAuB,UAACC,GAAD,EAAMC,IAAN,EAAU;MAC7C,OAAOD,GAAG,GAAGC,IAAI,CAACJ,KAAI,CAACnB,KAAL,CAAWiB,QAAZ,CAAjB;IACD,CAFa,EAEX,CAFW,CAAd;IAIA,IAAMO,MAAM,GAAGb,KAAK,CAACc,MAAN,CAAaC,GAAb,CAAiB,UAACC,CAAD,EAAIC,CAAJ,EAAK;MACnC,IAAIC,KAAJ;;MAEA,IAAIxB,QAAJ,EAAc;QACZwB,KAAK,GAAGF,CAAC,CAACJ,IAAF,CAAOJ,KAAI,CAACnB,KAAL,CAAWiB,QAAlB,CAAR;MACD,CAFD,MAEO;QACL,IAAIG,KAAK,KAAK,CAAd,EAAiB;UACfS,KAAK,GAAG,IAAI,GAAZ;QACD,CAFD,MAEO;UACL,IAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAChB,MAAMZ,KAAP,GAAgBO,CAAC,CAACJ,IAAF,CAAOJ,KAAI,CAACnB,KAAL,CAAWiB,QAAlB,CADC,CAAnB;UAGAY,KAAK,GAAGE,IAAI,CAACC,KAAL,CAAY,MAAMZ,KAAP,GAAgBO,CAAC,CAACJ,IAAF,CAAOJ,KAAI,CAACnB,KAAL,CAAWiB,QAAlB,CAA3B,IAA0D,GAAlE;;UACA,IAAIR,cAAc,IAAIqB,UAAU,KAAK,CAArC,EAAwC;YACtCD,KAAK,GAAG,KAAR;UACD,CAFD,MAEO;YACLA,KAAK,GAAGC,UAAU,GAAG,GAArB;UACD;QACF;MACF;;MAED,OACE,MAAC,CAAD;QAAA,WACE,KAAC,IAAD;UAAM,CAAC,EAAEH,CAAC,CAACM,MAAF,CAASC,IAAT,CAAcC,KAAd,EAAT;UAAgC,IAAI,EAAER,CAAC,CAACJ,IAAF,CAAOa;QAA7C,EADF,EAEG7B,SAAS,GACR,KAAC,IAAD;UACE,KAAK,EAAC,MADR;UAEE,MAAM,EAAC,MAFT;UAGE,IAAI,EAAEoB,CAAC,CAACJ,IAAF,CAAOa,KAHf;UAIE,EAAE,EAAE,CAJN;UAKE,EAAE,EAAE,CALN;UAME,CAAC,EAAEjB,KAAI,CAACnB,KAAL,CAAWqC,KAAX,GAAmB,GAAnB,GAAyB,EAN9B;UAOE,CAAC,EACC,EAAElB,KAAI,CAACnB,KAAL,CAAWe,MAAX,GAAoB,GAAtB,IACEI,KAAI,CAACnB,KAAL,CAAWe,MAAX,GAAoB,GAArB,GAA4BI,KAAI,CAACnB,KAAL,CAAWgB,IAAX,CAAgBsB,MAA7C,GAAuDV,CADvD,GAEA;QAVJ,EADQ,GAcN,IAhBN,EAiBGrB,SAAS,GACR,KAAC,IAAD;UACE,IAAI,EAAEoB,CAAC,CAACJ,IAAF,CAAOgB,eADf;UAEE,QAAQ,EAAEZ,CAAC,CAACJ,IAAF,CAAOiB,cAFnB;UAGE,UAAU,EAAEb,CAAC,CAACJ,IAAF,CAAOkB,gBAHrB;UAIE,CAAC,EAAEtB,KAAI,CAACnB,KAAL,CAAWqC,KAAX,GAAmB,GAJxB;UAKE,CAAC,EACC,EAAElB,KAAI,CAACnB,KAAL,CAAWe,MAAX,GAAoB,GAAtB,IACEI,KAAI,CAACnB,KAAL,CAAWe,MAAX,GAAoB,GAArB,GAA4BI,KAAI,CAACnB,KAAL,CAAWgB,IAAX,CAAgBsB,MAA7C,GAAuDV,CADvD,GAEA,KAAK,CART;UAAA,UAWMC,KAAK,MAAL,GAASF,CAAC,CAACJ,IAAF,CAAOmB;QAXtB,EADQ,GAcN,IA/BN;MAAA,GAAQX,IAAI,CAACY,MAAL,EAAR,CADF;IAmCD,CAxDc,CAAf;IA0DA,OACE,KAAC,IAAD;MACE,KAAK,EAACC;QACJP,KAAK,EAAE,KAAKrC,KAAL,CAAWqC,KADd;QAEJtB,MAAM,EAAE,KAAKf,KAAL,CAAWe,MAFf;QAGJ8B,OAAO,EAAE;MAHL,GAID3C,KAJC,CADR;MAAA,UAQE,MAAC,GAAD;QAAK,KAAK,EAAE,KAAKF,KAAL,CAAWqC,KAAvB;QAA8B,MAAM,EAAE,KAAKrC,KAAL,CAAWe,MAAjD;QAAA,WACE,KAAC,CAAD;UAAA,UACG,KAAK+B,UAAL,CAAeF;YACdP,KAAK,EAAE,KAAKrC,KAAL,CAAWe,MADJ;YAEdA,MAAM,EAAE,KAAKf,KAAL,CAAWe;UAFL,GAGX,KAAKf,KAAL,CAAW+C,WAHA,CAAf;QADH,EADF,EAQE,KAAC,IAAD;UACE,KAAK,EAAC,MADR;UAEE,MAAM,EAAE,KAAK/C,KAAL,CAAWe,MAFrB;UAGE,EAAE,EAAEiC,YAHN;UAIE,EAAE,EAAEA,YAJN;UAKE,IAAI,EAAE7C;QALR,EARF,EAeE,KAAC,CAAD;UACE,CAAC,EACC,KAAKH,KAAL,CAAWqC,KAAX,GAAmB,CAAnB,GAAuB,CAAvB,GACAY,MAAM,CAAC,KAAKjD,KAAL,CAAWkD,WAAX,GAAyB,KAAKlD,KAAL,CAAWkD,WAApC,GAAkD,CAAnD,CAHV;UAKE,CAAC,EAAE,KAAKlD,KAAL,CAAWe,MAAX,GAAoB,CALzB;UAAA,UAOGS;QAPH,EAfF;MAAA;IARF,EADF;EAoCD,CAvHD;;EAwHF;AAAC,CAzHD,CAAuB3B,aAAvB;;AA2HA,eAAeE,QAAf","names":["Pie","React","G","Path","Rect","Svg","Text","AbstractChart","__extends","PieChart","props","_b","style","backgroundColor","_c","absolute","_d","hasLegend","_e","avoidFalseZero","_f","chart","center","r","R","height","data","accessor","x","_this","total","reduce","sum","item","slices","curves","map","c","i","value","percentage","Math","round","sector","path","print","color","width","length","legendFontColor","legendFontSize","legendFontFamily","name","random","__assign","padding","renderDefs","chartConfig","borderRadius","Number","paddingLeft"],"sourceRoot":"","sources":["../src/PieChart.tsx"],"sourcesContent":["import Pie from \"paths-js/pie\";\nimport React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\nimport { G, Path, Rect, Svg, Text } from \"react-native-svg\";\n\nimport AbstractChart, { AbstractChartProps } from \"./AbstractChart\";\n\nexport interface PieChartProps extends AbstractChartProps {\n  data: Array<any>;\n  width: number;\n  height: number;\n  accessor: string;\n  backgroundColor: string;\n  paddingLeft: string;\n  center?: Array<number>;\n  absolute?: boolean;\n  hasLegend?: boolean;\n  style?: Partial<ViewStyle>;\n  avoidFalseZero?: boolean;\n}\n\ntype PieChartState = {};\n\nclass PieChart extends AbstractChart<PieChartProps, PieChartState> {\n  render() {\n    const {\n      style = {},\n      backgroundColor,\n      absolute = false,\n      hasLegend = true,\n      avoidFalseZero = false\n    } = this.props;\n\n    const { borderRadius = 0 } = style;\n\n    const chart = Pie({\n      center: this.props.center || [0, 0],\n      r: 0,\n      R: this.props.height / 2.5,\n      data: this.props.data,\n      accessor: x => {\n        return x[this.props.accessor];\n      }\n    });\n\n    const total = this.props.data.reduce((sum, item) => {\n      return sum + item[this.props.accessor];\n    }, 0);\n\n    const slices = chart.curves.map((c, i) => {\n      let value: string;\n\n      if (absolute) {\n        value = c.item[this.props.accessor];\n      } else {\n        if (total === 0) {\n          value = 0 + \"%\";\n        } else {\n          const percentage = Math.round(\n            (100 / total) * c.item[this.props.accessor]\n          );\n          value = Math.round((100 / total) * c.item[this.props.accessor]) + \"%\";\n          if (avoidFalseZero && percentage === 0) {\n            value = \"<1%\";\n          } else {\n            value = percentage + \"%\";\n          }\n        }\n      }\n\n      return (\n        <G key={Math.random()}>\n          <Path d={c.sector.path.print()} fill={c.item.color} />\n          {hasLegend ? (\n            <Rect\n              width=\"16px\"\n              height=\"16px\"\n              fill={c.item.color}\n              rx={8}\n              ry={8}\n              x={this.props.width / 2.5 - 24}\n              y={\n                -(this.props.height / 2.5) +\n                ((this.props.height * 0.8) / this.props.data.length) * i +\n                12\n              }\n            />\n          ) : null}\n          {hasLegend ? (\n            <Text\n              fill={c.item.legendFontColor}\n              fontSize={c.item.legendFontSize}\n              fontFamily={c.item.legendFontFamily}\n              x={this.props.width / 2.5}\n              y={\n                -(this.props.height / 2.5) +\n                ((this.props.height * 0.8) / this.props.data.length) * i +\n                12 * 2\n              }\n            >\n              {`${value} ${c.item.name}`}\n            </Text>\n          ) : null}\n        </G>\n      );\n    });\n\n    return (\n      <View\n        style={{\n          width: this.props.width,\n          height: this.props.height,\n          padding: 0,\n          ...style\n        }}\n      >\n        <Svg width={this.props.width} height={this.props.height}>\n          <G>\n            {this.renderDefs({\n              width: this.props.height,\n              height: this.props.height,\n              ...this.props.chartConfig\n            })}\n          </G>\n          <Rect\n            width=\"100%\"\n            height={this.props.height}\n            rx={borderRadius}\n            ry={borderRadius}\n            fill={backgroundColor}\n          />\n          <G\n            x={\n              this.props.width / 2 / 2 +\n              Number(this.props.paddingLeft ? this.props.paddingLeft : 0)\n            }\n            y={this.props.height / 2}\n          >\n            {slices}\n          </G>\n        </Svg>\n      </View>\n    );\n  }\n}\n\nexport default PieChart;\n"]},"metadata":{},"sourceType":"module"}