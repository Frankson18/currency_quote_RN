{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens\";\nimport { getIsModalPresentation } from \"./Card\";\nimport CardContainer from \"./CardContainer\";\nvar EPSILON = 1e-5;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nvar getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {\n  if (isParentModal) {\n    return true;\n  }\n\n  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n  var isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  var isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\n\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n        _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n        headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n        headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = StyleSheet.flatten(headerStyle || {});\n    var height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref4 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      presentation = _ref4.presentation,\n      _ref4$gestureDirectio = _ref4.gestureDirection,\n      gestureDirection = _ref4$gestureDirectio === void 0 ? presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref4$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref) {\n      var route = _ref.route,\n          height = _ref.height;\n\n      _this.setState(function (_ref2) {\n        var headerHeights = _ref2.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref3) {\n      var route = _ref3.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n\n      return undefined;\n    });\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          insets = _this$props.insets,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          isParentHeaderShown = _this$props.isParentHeaderShown,\n          isParentModal = _this$props.isParentModal,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onGestureStart = _this$props.onGestureStart,\n          onGestureEnd = _this$props.onGestureEnd,\n          onGestureCancel = _this$props.onGestureCancel,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n\n        var options = (_scene$descriptor$opt = scene.descriptor.options) !== null && _scene$descriptor$opt !== void 0 ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n            headerTransparent = options.headerTransparent,\n            _options$headerShown = options.headerShown,\n            headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n\n        return false;\n      });\n      var activeScreensLimit = 1;\n\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n            detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== scenes.map(function (scene) {\n          return scene.descriptor.options.cardStyleInterpolator;\n        }).lastIndexOf(forModalPresentationIOS) : true : _options$detachPrevio;\n\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          if (i <= scenes.length - 2) {\n            break;\n          }\n        }\n      }\n\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n            _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n            headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n            headerTransparent = _scene$descriptor$opt2.headerTransparent,\n            headerStyle = _scene$descriptor$opt2.headerStyle,\n            headerTintColor = _scene$descriptor$opt2.headerTintColor,\n            freezeOnBlur = _scene$descriptor$opt2.freezeOnBlur;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n        var headerDarkContent;\n\n        if (headerShown) {\n          if (typeof headerTintColor === 'string') {\n            headerDarkContent = Color(headerTintColor).isDark();\n          } else {\n            var flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n\n            if (flattenedHeaderStyle && 'backgroundColor' in flattenedHeaderStyle && typeof flattenedHeaderStyle.backgroundColor === 'string') {\n              headerDarkContent = !Color(flattenedHeaderStyle.backgroundColor).isDark();\n            }\n          }\n        }\n\n        var interpolationIndex = getInterpolationIndex(scenes, index);\n        var isModal = getIsModal(scene, interpolationIndex, isParentModal);\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          freezeOnBlur: freezeOnBlur,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          modal: isModal,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref5 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref5.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      var scenes = props.routes.map(function (route, index, self) {\n        var _descriptor$options$h;\n\n        var previousRoute = self[index - 1];\n        var nextRoute = self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n            animationEnabled = _optionsForTransition === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _optionsForTransition,\n            _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n            gestureEnabled = _optionsForTransition2 === void 0 ? Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n            _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n            gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n            _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n            transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n            _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n            cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n            _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n            headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n            _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n            cardOverlayEnabled = _optionsForTransition7 === void 0 ? Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator) : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) !== null && _descriptor$options$h !== void 0 ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var scene = {\n          route: route,\n          descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n            options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n              animationEnabled: animationEnabled,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n            next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["Background","getDefaultHeaderHeight","SafeAreaProviderCompat","Color","React","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","DefaultTransition","ModalFadeTransition","ModalTransition","getDistanceForDirection","MaybeScreen","MaybeScreenContainer","getIsModalPresentation","CardContainer","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","cardStyleInterpolatorCurrent","_scenes$i","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","headerStatusBarHeight","top","headerStyle","style","StyleSheet","flatten","height","route","key","getDistanceFromOptions","presentation","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","constructor","props","_defineProperty","e","nativeEvent","setState","state","headerHeights","previousHeight","routes","getPreviousRoute","previousRoute","previousScene","find","undefined","gestures","initialMetrics","frame","descriptors","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","Platform","OS","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerMode","headerTransparent","headerShown","activeScreensLimit","length","detachPreviousScreen","map","lastIndexOf","floatingHeader","Fragment","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","enabled","container","onLayout","handleLayout","self","focused","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","headerTintColor","freezeOnBlur","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","headerDarkContent","isDark","flattenedHeaderStyle","backgroundColor","isNextScreenTransparent","detachCurrentScreen","absoluteFill","active","pointerEvents","modal","closing","includes","onHeaderHeightChange","hasAbsoluteFloatHeader","animationEnabled","Animated","Value","openingRouteKeys","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","defaultTransitionPreset","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","header","next","__memo","every","it","Component","create","flex","position","zIndex"],"sources":["CardStack.tsx"],"sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 1e-5;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      'height' in style && typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n              freezeOnBlur,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else {\n                const flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n\n                if (\n                  flattenedHeaderStyle &&\n                  'backgroundColor' in flattenedHeaderStyle &&\n                  typeof flattenedHeaderStyle.backgroundColor === 'string'\n                ) {\n                  headerDarkContent = !Color(\n                    flattenedHeaderStyle.backgroundColor\n                  ).isDark();\n                }\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                freezeOnBlur={freezeOnBlur}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}