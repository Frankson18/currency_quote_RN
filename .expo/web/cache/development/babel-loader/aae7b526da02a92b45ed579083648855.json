{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport default function ModalStatusBarManager(_ref) {\n  var _flattenedStyle$trans, _flattenedStyle$trans2;\n\n  var dark = _ref.dark,\n      layout = _ref.layout,\n      insets = _ref.insets,\n      style = _ref.style;\n\n  var _useTheme = useTheme(),\n      darkTheme = _useTheme.dark;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      overlapping = _React$useState2[0],\n      setOverlapping = _React$useState2[1];\n\n  var scale = 1 - 20 / layout.width;\n  var offset = (insets.top - 34) * scale;\n  var flattenedStyle = StyleSheet.flatten(style);\n  var translateY = flattenedStyle === null || flattenedStyle === void 0 ? void 0 : (_flattenedStyle$trans = flattenedStyle.transform) === null || _flattenedStyle$trans === void 0 ? void 0 : (_flattenedStyle$trans2 = _flattenedStyle$trans.find(function (s) {\n    return s.translateY !== undefined;\n  })) === null || _flattenedStyle$trans2 === void 0 ? void 0 : _flattenedStyle$trans2.translateY;\n  React.useEffect(function () {\n    var listener = function listener(_ref2) {\n      var value = _ref2.value;\n      setOverlapping(value < offset);\n    };\n\n    var sub = translateY === null || translateY === void 0 ? void 0 : translateY.addListener(listener);\n    return function () {\n      return translateY === null || translateY === void 0 ? void 0 : translateY.removeListener(sub);\n    };\n  }, [offset, translateY]);\n  var darkContent = dark !== null && dark !== void 0 ? dark : !darkTheme;\n  return React.createElement(StatusBar, {\n    animated: true,\n    barStyle: overlapping && darkContent ? 'dark-content' : 'light-content'\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAAyB,0BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AAaA,eAAe,SAASC,qBAAT,OAKL;EAAA;;EAAA,IAJRC,IAIQ,QAJRA,IAIQ;EAAA,IAHRC,MAGQ,QAHRA,MAGQ;EAAA,IAFRC,MAEQ,QAFRA,MAEQ;EAAA,IADRC,KACQ,QADRA,KACQ;;EACR,gBAA4BN,QAAQ,EAApC;EAAA,IAAcO,SAAd,aAAQJ,IAAR;;EACA,sBAAsCF,KAAK,CAACO,QAANP,CAAe,IAAfA,CAAtC;EAAA;EAAA,IAAOQ,WAAP;EAAA,IAAoBC,cAApB;;EAEA,IAAMC,KAAK,GAAG,IAAI,KAAKP,MAAM,CAACQ,KAA9B;EACA,IAAMC,MAAM,GAAG,CAACR,MAAM,CAACS,GAAPT,GAAa,EAAd,IAAoBM,KAAnC;EAEA,IAAMI,cAAc,GAAGC,UAAU,CAACC,OAAXD,CAAmBV,KAAnBU,CAAvB;EACA,IAAME,UAAU,GAAGH,cAAH,SAAGA,kBAAH,WAAGA,GAAH,MAAGA,GAAH,yBAAGA,cAAc,CAAEI,SAAnB,oFAAGC,sBAA2BC,IAA3B,CAChBC,WAAD;IAAA,OAAYA,CAAC,CAACJ,UAAFI,KAAiBC,SAA7B;EAAA,CADiB,CAAH,2DAAGC,uBAEhBN,UAFH;EAIAjB,KAAK,CAACwB,SAANxB,CAAgB,YAAM;IACpB,IAAMyB,QAAQ,GAAG,SAAXA,QAAW,QAAkC;MAAA,IAA/BC,KAA+B,SAA/BA,KAA+B;MACjDjB,cAAc,CAACiB,KAAK,GAAGd,MAAT,CAAdH;IADF;;IAIA,IAAMkB,GAAG,GAAGV,UAAH,SAAGA,cAAH,WAAGA,GAAH,MAAGA,aAAU,CAAEW,WAAZX,CAAwBQ,QAAxBR,CAAZ;IAEA,OAAO;MAAA,OAAMA,UAAN,SAAMA,cAAN,WAAMA,GAAN,MAAMA,aAAU,CAAEY,cAAZZ,CAA2BU,GAA3BV,CAAN;IAAA,CAAP;EAPF,GAQG,CAACL,MAAD,EAASK,UAAT,CARHjB;EAUA,IAAM8B,WAAW,GAAG5B,IAAH,SAAGA,QAAH,WAAGA,UAAQ,CAACI,SAA7B;EAEA,OACEN,oBAAC+B,SAAD;IACEC,QAAQ,MADV;IAEEC,QAAQ,EAAEzB,WAAW,IAAIsB,WAAftB,GAA6B,cAA7BA,GAA8C;EAF1D,EADF;AAMD","names":["useTheme","React","ModalStatusBarManager","dark","layout","insets","style","darkTheme","useState","overlapping","setOverlapping","scale","width","offset","top","flattenedStyle","StyleSheet","flatten","translateY","transform","_flattenedStyle$trans","find","s","undefined","_flattenedStyle$trans2","useEffect","listener","value","sub","addListener","removeListener","darkContent","StatusBar","animated","barStyle"],"sources":["ModalStatusBarManager.tsx"],"sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StatusBar, StyleSheet } from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport type { Layout } from '../types';\n\ntype Props = {\n  dark: boolean | undefined;\n  layout: Layout;\n  insets: EdgeInsets;\n  style: any;\n};\n\nexport default function ModalStatusBarManager({\n  dark,\n  layout,\n  insets,\n  style,\n}: Props) {\n  const { dark: darkTheme } = useTheme();\n  const [overlapping, setOverlapping] = React.useState(true);\n\n  const scale = 1 - 20 / layout.width;\n  const offset = (insets.top - 34) * scale;\n\n  const flattenedStyle = StyleSheet.flatten(style);\n  const translateY = flattenedStyle?.transform?.find(\n    (s: any) => s.translateY !== undefined\n  )?.translateY;\n\n  React.useEffect(() => {\n    const listener = ({ value }: { value: number }) => {\n      setOverlapping(value < offset);\n    };\n\n    const sub = translateY?.addListener(listener);\n\n    return () => translateY?.removeListener(sub);\n  }, [offset, translateY]);\n\n  const darkContent = dark ?? !darkTheme;\n\n  return (\n    <StatusBar\n      animated\n      barStyle={overlapping && darkContent ? 'dark-content' : 'light-content'}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}