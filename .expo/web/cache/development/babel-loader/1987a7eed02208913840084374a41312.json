{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"state\", \"descriptors\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { HeaderShownContext, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\nimport ModalPresentationContext from \"../../utils/ModalPresentationContext\";\nimport { GestureHandlerRootView } from \"../GestureHandler\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport CardStack from \"./CardStack\";\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\n\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n\n  var _super = _createSuper(StackView);\n\n  function StackView() {\n    var _this;\n\n    _classCallCheck(this, StackView);\n\n    _this = _super.apply(this, arguments);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousRoute\", function (_ref) {\n      var route = _ref.route;\n      var _this$state = _this.state,\n          closingRouteKeys = _this$state.closingRouteKeys,\n          replacingRouteKeys = _this$state.replacingRouteKeys;\n\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderScene\", function (_ref2) {\n      var route = _ref2.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n\n      if (!descriptor) {\n        return null;\n      }\n\n      return descriptor.render();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderHeader\", function (props) {\n      return React.createElement(HeaderContainer, props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleOpenRoute\", function (_ref3) {\n      var route = _ref3.route;\n      var _this$props = _this.props,\n          state = _this$props.state,\n          navigation = _this$props.navigation;\n      var _this$state2 = _this.state,\n          closingRouteKeys = _this$state2.closingRouteKeys,\n          replacingRouteKeys = _this$state2.replacingRouteKeys;\n\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && state.routeNames.includes(route.name) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.navigate(route);\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleCloseRoute\", function (_ref4) {\n      var route = _ref4.route;\n      var _this$props2 = _this.props,\n          state = _this$props2.state,\n          navigation = _this$props2.navigation;\n\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n          source: route.key,\n          target: state.key\n        }));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionStart\", function (_ref5, closing) {\n      var route = _ref5.route;\n      return _this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionEnd\", function (_ref6, closing) {\n      var route = _ref6.route;\n      return _this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStart\", function (_ref7) {\n      var route = _ref7.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEnd\", function (_ref8) {\n      var route = _ref8.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureCancel\", function (_ref9) {\n      var route = _ref9.route;\n\n      _this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          state = _this$props3.state,\n          _ = _this$props3.descriptors,\n          rest = _objectWithoutProperties(_this$props3, _excluded);\n\n      var _this$state3 = this.state,\n          routes = _this$state3.routes,\n          descriptors = _this$state3.descriptors,\n          openingRouteKeys = _this$state3.openingRouteKeys,\n          closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(SafeAreaProviderCompat, null, React.createElement(SafeAreaInsetsContext.Consumer, null, function (insets) {\n        return React.createElement(ModalPresentationContext.Consumer, null, function (isParentModal) {\n          return React.createElement(HeaderShownContext.Consumer, null, function (isParentHeaderShown) {\n            return React.createElement(CardStack, _extends({\n              insets: insets,\n              isParentHeaderShown: isParentHeaderShown,\n              isParentModal: isParentModal,\n              getPreviousRoute: _this2.getPreviousRoute,\n              routes: routes,\n              openingRouteKeys: openingRouteKeys,\n              closingRouteKeys: closingRouteKeys,\n              onOpenRoute: _this2.handleOpenRoute,\n              onCloseRoute: _this2.handleCloseRoute,\n              onTransitionStart: _this2.handleTransitionStart,\n              onTransitionEnd: _this2.handleTransitionEnd,\n              renderHeader: _this2.renderHeader,\n              renderScene: _this2.renderScene,\n              state: state,\n              descriptors: descriptors,\n              onGestureStart: _this2.handleGestureStart,\n              onGestureEnd: _this2.handleGestureEnd,\n              onGestureCancel: _this2.handleGestureCancel\n            }, rest));\n          });\n        });\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n          closingRouteKeys = state.closingRouteKeys,\n          replacingRouteKeys = state.replacingRouteKeys,\n          previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) !== null && _descriptor$options$a !== void 0 ? _descriptor$options$a : 'push';\n      };\n\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat(_toConsumableArray(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat(_toConsumableArray(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n\n        routes = routes.slice();\n\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat(_toConsumableArray(state.routes.filter(function (_ref10) {\n          var key = _ref10.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n\n  return StackView;\n}(React.Component);\n\nexport { StackView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["HeaderShownContext","SafeAreaProviderCompat","StackActions","React","SafeAreaInsetsContext","ModalPresentationContext","GestureHandlerRootView","HeaderContainer","CardStack","GestureHandlerWrapper","View","isArrayEqual","a","b","length","every","it","index","StackView","_defineProperty","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","state","filter","r","key","includes","findIndex","descriptor","props","render","navigation","some","routeNames","name","navigate","setState","dispatch","pop","source","target","closing","emit","type","data","_","rest","style","styles","container","Consumer","insets","isParentModal","isParentHeaderShown","getPreviousRoute","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","onTransitionStart","handleTransitionStart","onTransitionEnd","handleTransitionEnd","renderHeader","renderScene","onGestureStart","handleGestureStart","onGestureEnd","handleGestureEnd","onGestureCancel","handleGestureCancel","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","options","animationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","Component","StyleSheet","create","flex"],"sources":["StackView.tsx"],"sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {\n  EdgeInsets,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets as EdgeInsets}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        renderScene={this.renderScene}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}