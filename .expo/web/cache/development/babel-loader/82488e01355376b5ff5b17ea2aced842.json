{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"url\", \"proxyOptions\"],\n    _excluded2 = [\"useProxy\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { CodeChallengeMethod, ResponseType } from \"./AuthRequest.types\";\nimport { AuthError } from \"./Errors\";\nimport * as PKCE from \"./PKCE\";\nimport * as QueryParams from \"./QueryParams\";\nimport sessionUrlProvider from \"./SessionUrlProvider\";\nimport { TokenResponse } from \"./TokenRequest\";\nvar _authLock = false;\nexport var AuthRequest = function () {\n  function AuthRequest(request) {\n    var _request$responseType, _request$state, _request$extraParams, _request$codeChalleng, _request$usePKCE;\n\n    _classCallCheck(this, AuthRequest);\n\n    this.url = null;\n    this.responseType = (_request$responseType = request.responseType) != null ? _request$responseType : ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = (_request$state = request.state) != null ? _request$state : PKCE.generateRandom(10);\n    this.extraParams = (_request$extraParams = request.extraParams) != null ? _request$extraParams : {};\n    this.codeChallengeMethod = (_request$codeChalleng = request.codeChallengeMethod) != null ? _request$codeChalleng : CodeChallengeMethod.S256;\n    this.usePKCE = (_request$usePKCE = request.usePKCE) != null ? _request$usePKCE : true;\n\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(\"`AuthRequest` `extraParams.prompt` will be overwritten by `prompt`.\");\n      }\n\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\"`AuthRequest` `extraParams.client_secret` will be overwritten by `clientSecret`.\");\n      }\n\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\"`AuthRequest` `extraParams.code_challenge_method` will be overwritten by `codeChallengeMethod`.\");\n      }\n    }\n\n    invariant(this.codeChallengeMethod !== CodeChallengeMethod.Plain, \"`AuthRequest` does not support `CodeChallengeMethod.Plain` as it's not secure.\");\n    invariant(this.redirectUri, \"`AuthRequest` requires a valid `redirectUri`. Ex: \" + Platform.select({\n      web: 'https://yourwebsite.com/',\n      default: 'com.your.app:/oauthredirect'\n    }));\n  }\n\n  _createClass(AuthRequest, [{\n    key: \"getAuthRequestConfigAsync\",\n    value: function () {\n      var _getAuthRequestConfigAsync = _asyncToGenerator(function* () {\n        if (this.usePKCE) {\n          yield this.ensureCodeIsSetupAsync();\n        }\n\n        return {\n          responseType: this.responseType,\n          clientId: this.clientId,\n          redirectUri: this.redirectUri,\n          scopes: this.scopes,\n          clientSecret: this.clientSecret,\n          codeChallenge: this.codeChallenge,\n          codeChallengeMethod: this.codeChallengeMethod,\n          prompt: this.prompt,\n          state: this.state,\n          extraParams: this.extraParams,\n          usePKCE: this.usePKCE\n        };\n      });\n\n      function getAuthRequestConfigAsync() {\n        return _getAuthRequestConfigAsync.apply(this, arguments);\n      }\n\n      return getAuthRequestConfigAsync;\n    }()\n  }, {\n    key: \"promptAsync\",\n    value: function () {\n      var _promptAsync = _asyncToGenerator(function* (discovery) {\n        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var url = _ref.url,\n            proxyOptions = _ref.proxyOptions,\n            options = _objectWithoutProperties(_ref, _excluded);\n\n        if (!url) {\n          if (!this.url) {\n            return this.promptAsync(discovery, _objectSpread(_objectSpread({}, options), {}, {\n              url: yield this.makeAuthUrlAsync(discovery)\n            }));\n          }\n\n          url = this.url;\n        }\n\n        invariant(url, 'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.');\n        var startUrl = url;\n        var returnUrl = this.redirectUri;\n\n        if (options.useProxy) {\n          returnUrl = sessionUrlProvider.getDefaultReturnUrl(proxyOptions == null ? void 0 : proxyOptions.path, proxyOptions);\n          startUrl = sessionUrlProvider.getStartUrl(url, returnUrl, options.projectNameForProxy);\n        }\n\n        if (_authLock) {\n          if (__DEV__) {\n            console.warn('Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.');\n          }\n\n          return {\n            type: 'locked'\n          };\n        }\n\n        _authLock = true;\n        var result;\n\n        try {\n          var useProxy = options.useProxy,\n              openOptions = _objectWithoutProperties(options, _excluded2);\n\n          result = yield WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions);\n        } finally {\n          _authLock = false;\n        }\n\n        if (result.type === 'opened') {\n          throw new Error('An unexpected error occurred');\n        }\n\n        if (result.type !== 'success') {\n          return {\n            type: result.type\n          };\n        }\n\n        return this.parseReturnUrl(result.url);\n      });\n\n      function promptAsync(_x) {\n        return _promptAsync.apply(this, arguments);\n      }\n\n      return promptAsync;\n    }()\n  }, {\n    key: \"parseReturnUrl\",\n    value: function parseReturnUrl(url) {\n      var _QueryParams$getQuery = QueryParams.getQueryParams(url),\n          params = _QueryParams$getQuery.params,\n          errorCode = _QueryParams$getQuery.errorCode;\n\n      var state = params.state,\n          _params$error = params.error,\n          error = _params$error === void 0 ? errorCode : _params$error;\n      var parsedError = null;\n      var authentication = null;\n\n      if (state !== this.state) {\n        parsedError = new AuthError({\n          error: 'state_mismatch',\n          error_description: 'Cross-Site request verification failed. Cached state and returned state do not match.'\n        });\n      } else if (error) {\n        parsedError = new AuthError(_objectSpread({\n          error: error\n        }, params));\n      }\n\n      if (params.access_token) {\n        authentication = TokenResponse.fromQueryParams(params);\n      }\n\n      return {\n        type: parsedError ? 'error' : 'success',\n        error: parsedError,\n        url: url,\n        params: params,\n        authentication: authentication,\n        errorCode: errorCode\n      };\n    }\n  }, {\n    key: \"makeAuthUrlAsync\",\n    value: function () {\n      var _makeAuthUrlAsync = _asyncToGenerator(function* (discovery) {\n        var _request$scopes;\n\n        var request = yield this.getAuthRequestConfigAsync();\n        if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n        var params = {};\n\n        if (request.codeChallenge) {\n          params.code_challenge = request.codeChallenge;\n        }\n\n        for (var extra in request.extraParams) {\n          if (extra in request.extraParams) {\n            params[extra] = request.extraParams[extra];\n          }\n        }\n\n        if (request.usePKCE && request.codeChallengeMethod) {\n          params.code_challenge_method = request.codeChallengeMethod;\n        }\n\n        if (request.clientSecret) {\n          params.client_secret = request.clientSecret;\n        }\n\n        if (request.prompt) {\n          params.prompt = request.prompt;\n        }\n\n        params.redirect_uri = request.redirectUri;\n        params.client_id = request.clientId;\n        params.response_type = request.responseType;\n        params.state = request.state;\n\n        if ((_request$scopes = request.scopes) != null && _request$scopes.length) {\n          params.scope = request.scopes.join(' ');\n        }\n\n        var query = QueryParams.buildQueryString(params);\n        this.url = discovery.authorizationEndpoint + \"?\" + query;\n        return this.url;\n      });\n\n      function makeAuthUrlAsync(_x2) {\n        return _makeAuthUrlAsync.apply(this, arguments);\n      }\n\n      return makeAuthUrlAsync;\n    }()\n  }, {\n    key: \"ensureCodeIsSetupAsync\",\n    value: function () {\n      var _ensureCodeIsSetupAsync = _asyncToGenerator(function* () {\n        if (this.codeVerifier) {\n          return;\n        }\n\n        var _yield$PKCE$buildCode = yield PKCE.buildCodeAsync(),\n            codeVerifier = _yield$PKCE$buildCode.codeVerifier,\n            codeChallenge = _yield$PKCE$buildCode.codeChallenge;\n\n        this.codeVerifier = codeVerifier;\n        this.codeChallenge = codeChallenge;\n      });\n\n      function ensureCodeIsSetupAsync() {\n        return _ensureCodeIsSetupAsync.apply(this, arguments);\n      }\n\n      return ensureCodeIsSetupAsync;\n    }()\n  }]);\n\n  return AuthRequest;\n}();","map":{"version":3,"mappings":"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","names":["WebBrowser","invariant","CodeChallengeMethod","ResponseType","AuthError","PKCE","QueryParams","sessionUrlProvider","TokenResponse","_authLock","AuthRequest","request","url","responseType","Code","clientId","redirectUri","scopes","clientSecret","prompt","state","generateRandom","extraParams","codeChallengeMethod","S256","usePKCE","__DEV__","console","warn","client_secret","code_challenge_method","Plain","Platform","select","web","default","ensureCodeIsSetupAsync","codeChallenge","discovery","proxyOptions","options","promptAsync","makeAuthUrlAsync","startUrl","returnUrl","useProxy","getDefaultReturnUrl","path","getStartUrl","projectNameForProxy","type","result","openOptions","openAuthSessionAsync","Error","parseReturnUrl","getQueryParams","params","errorCode","error","parsedError","authentication","error_description","access_token","fromQueryParams","getAuthRequestConfigAsync","code_challenge","extra","redirect_uri","client_id","response_type","length","scope","join","query","buildQueryString","authorizationEndpoint","codeVerifier","buildCodeAsync"],"sourceRoot":"","sources":["../src/AuthRequest.ts"],"sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport invariant from 'invariant';\nimport { Platform } from 'react-native';\n\nimport {\n  AuthRequestConfig,\n  AuthRequestPromptOptions,\n  CodeChallengeMethod,\n  ResponseType,\n  Prompt,\n} from './AuthRequest.types';\nimport { AuthSessionResult } from './AuthSession.types';\nimport { DiscoveryDocument } from './Discovery';\nimport { AuthError } from './Errors';\nimport * as PKCE from './PKCE';\nimport * as QueryParams from './QueryParams';\nimport sessionUrlProvider from './SessionUrlProvider';\nimport { TokenResponse } from './TokenRequest';\n\nlet _authLock: boolean = false;\n\ntype AuthDiscoveryDocument = Pick<DiscoveryDocument, 'authorizationEndpoint'>;\n\n// @needsAudit @docsMissing\n/**\n * Used to manage an authorization request according to the OAuth spec: [Section 4.1.1][https://tools.ietf.org/html/rfc6749#section-4.1.1].\n * You can use this class directly for more info around the authorization.\n *\n * **Common use-cases:**\n *\n * - Parse a URL returned from the authorization server with `parseReturnUrlAsync()`.\n * - Get the built authorization URL with `makeAuthUrlAsync()`.\n * - Get a loaded JSON representation of the auth request with crypto state loaded with `getAuthRequestConfigAsync()`.\n *\n * @example\n * ```ts\n * // Create a request.\n * const request = new AuthRequest({ ... });\n *\n * // Prompt for an auth code\n * const result = await request.promptAsync(discovery, { useProxy: true });\n *\n * // Get the URL to invoke\n * const url = await request.makeAuthUrlAsync(discovery);\n *\n * // Get the URL to invoke\n * const parsed = await request.parseReturnUrlAsync(\"<URL From Server>\");\n * ```\n */\nexport class AuthRequest implements Omit<AuthRequestConfig, 'state'> {\n  /**\n   * Used for protection against [Cross-Site Request Forgery](https://tools.ietf.org/html/rfc6749#section-10.12).\n   */\n  public state: string;\n  public url: string | null = null;\n  public codeVerifier?: string;\n  public codeChallenge?: string;\n\n  readonly responseType: ResponseType | string;\n  readonly clientId: string;\n  readonly extraParams: Record<string, string>;\n  readonly usePKCE?: boolean;\n  readonly codeChallengeMethod: CodeChallengeMethod;\n  readonly redirectUri: string;\n  readonly scopes?: string[];\n  readonly clientSecret?: string;\n  readonly prompt?: Prompt;\n\n  constructor(request: AuthRequestConfig) {\n    this.responseType = request.responseType ?? ResponseType.Code;\n    this.clientId = request.clientId;\n    this.redirectUri = request.redirectUri;\n    this.scopes = request.scopes;\n    this.clientSecret = request.clientSecret;\n    this.prompt = request.prompt;\n    this.state = request.state ?? PKCE.generateRandom(10);\n    this.extraParams = request.extraParams ?? {};\n    this.codeChallengeMethod = request.codeChallengeMethod ?? CodeChallengeMethod.S256;\n    // PKCE defaults to true\n    this.usePKCE = request.usePKCE ?? true;\n\n    // Some warnings in development about potential confusing application code\n    if (__DEV__) {\n      if (this.prompt && this.extraParams.prompt) {\n        console.warn(`\\`AuthRequest\\` \\`extraParams.prompt\\` will be overwritten by \\`prompt\\`.`);\n      }\n      if (this.clientSecret && this.extraParams.client_secret) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.client_secret\\` will be overwritten by \\`clientSecret\\`.`\n        );\n      }\n      if (this.codeChallengeMethod && this.extraParams.code_challenge_method) {\n        console.warn(\n          `\\`AuthRequest\\` \\`extraParams.code_challenge_method\\` will be overwritten by \\`codeChallengeMethod\\`.`\n        );\n      }\n    }\n\n    invariant(\n      this.codeChallengeMethod !== CodeChallengeMethod.Plain,\n      `\\`AuthRequest\\` does not support \\`CodeChallengeMethod.Plain\\` as it's not secure.`\n    );\n    invariant(\n      this.redirectUri,\n      `\\`AuthRequest\\` requires a valid \\`redirectUri\\`. Ex: ${Platform.select({\n        web: 'https://yourwebsite.com/',\n        default: 'com.your.app:/oauthredirect',\n      })}`\n    );\n  }\n\n  /**\n   * Load and return a valid auth request based on the input config.\n   */\n  async getAuthRequestConfigAsync(): Promise<AuthRequestConfig> {\n    if (this.usePKCE) {\n      await this.ensureCodeIsSetupAsync();\n    }\n\n    return {\n      responseType: this.responseType,\n      clientId: this.clientId,\n      redirectUri: this.redirectUri,\n      scopes: this.scopes,\n      clientSecret: this.clientSecret,\n      codeChallenge: this.codeChallenge,\n      codeChallengeMethod: this.codeChallengeMethod,\n      prompt: this.prompt,\n      state: this.state,\n      extraParams: this.extraParams,\n      usePKCE: this.usePKCE,\n    };\n  }\n\n  /**\n   * Prompt a user to authorize for a code.\n   *\n   * @param discovery\n   * @param promptOptions\n   */\n  async promptAsync(\n    discovery: AuthDiscoveryDocument,\n    { url, proxyOptions, ...options }: AuthRequestPromptOptions = {}\n  ): Promise<AuthSessionResult> {\n    if (!url) {\n      if (!this.url) {\n        // Generate a new url\n        return this.promptAsync(discovery, {\n          ...options,\n          url: await this.makeAuthUrlAsync(discovery),\n        });\n      }\n      // Reuse the preloaded url\n      url = this.url;\n    }\n\n    // Prevent accidentally starting to an empty url\n    invariant(\n      url,\n      'No authUrl provided to AuthSession.startAsync. An authUrl is required -- it points to the page where the user will be able to sign in.'\n    );\n\n    let startUrl: string = url!;\n    let returnUrl: string = this.redirectUri;\n    if (options.useProxy) {\n      returnUrl = sessionUrlProvider.getDefaultReturnUrl(proxyOptions?.path, proxyOptions);\n      startUrl = sessionUrlProvider.getStartUrl(url, returnUrl, options.projectNameForProxy);\n    }\n    // Prevent multiple sessions from running at the same time, WebBrowser doesn't\n    // support it this makes the behavior predictable.\n    if (_authLock) {\n      if (__DEV__) {\n        console.warn(\n          'Attempted to call AuthSession.startAsync multiple times while already active. Only one AuthSession can be active at any given time.'\n        );\n      }\n\n      return { type: 'locked' };\n    }\n\n    // About to start session, set lock\n    _authLock = true;\n\n    let result: WebBrowser.WebBrowserAuthSessionResult;\n    try {\n      const { useProxy, ...openOptions } = options;\n      result = await WebBrowser.openAuthSessionAsync(startUrl, returnUrl, openOptions);\n    } finally {\n      _authLock = false;\n    }\n\n    if (result.type === 'opened') {\n      // This should never happen\n      throw new Error('An unexpected error occurred');\n    }\n    if (result.type !== 'success') {\n      return { type: result.type };\n    }\n\n    return this.parseReturnUrl(result.url);\n  }\n\n  parseReturnUrl(url: string): AuthSessionResult {\n    const { params, errorCode } = QueryParams.getQueryParams(url);\n    const { state, error = errorCode } = params;\n\n    let parsedError: AuthError | null = null;\n    let authentication: TokenResponse | null = null;\n    if (state !== this.state) {\n      // This is a non-standard error\n      parsedError = new AuthError({\n        error: 'state_mismatch',\n        error_description:\n          'Cross-Site request verification failed. Cached state and returned state do not match.',\n      });\n    } else if (error) {\n      parsedError = new AuthError({ error, ...params });\n    }\n    if (params.access_token) {\n      authentication = TokenResponse.fromQueryParams(params);\n    }\n\n    return {\n      type: parsedError ? 'error' : 'success',\n      error: parsedError,\n      url,\n      params,\n      authentication,\n\n      // Return errorCode for legacy\n      errorCode,\n    };\n  }\n\n  /**\n   * Create the URL for authorization.\n   *\n   * @param discovery\n   */\n  async makeAuthUrlAsync(discovery: AuthDiscoveryDocument): Promise<string> {\n    const request = await this.getAuthRequestConfigAsync();\n    if (!request.state) throw new Error('Cannot make request URL without a valid `state` loaded');\n\n    // Create a query string\n    const params: Record<string, string> = {};\n\n    if (request.codeChallenge) {\n      params.code_challenge = request.codeChallenge;\n    }\n\n    // copy over extra params\n    for (const extra in request.extraParams) {\n      if (extra in request.extraParams) {\n        params[extra] = request.extraParams[extra];\n      }\n    }\n\n    if (request.usePKCE && request.codeChallengeMethod) {\n      params.code_challenge_method = request.codeChallengeMethod;\n    }\n\n    if (request.clientSecret) {\n      params.client_secret = request.clientSecret;\n    }\n\n    if (request.prompt) {\n      params.prompt = request.prompt;\n    }\n\n    // These overwrite any extra params\n    params.redirect_uri = request.redirectUri;\n    params.client_id = request.clientId;\n    params.response_type = request.responseType!;\n    params.state = request.state;\n\n    if (request.scopes?.length) {\n      params.scope = request.scopes.join(' ');\n    }\n\n    const query = QueryParams.buildQueryString(params);\n    // Store the URL for later\n    this.url = `${discovery.authorizationEndpoint}?${query}`;\n    return this.url;\n  }\n\n  private async ensureCodeIsSetupAsync(): Promise<void> {\n    if (this.codeVerifier) {\n      return;\n    }\n\n    // This method needs to be resolved like all other native methods.\n    const { codeVerifier, codeChallenge } = await PKCE.buildCodeAsync();\n\n    this.codeVerifier = codeVerifier;\n    this.codeChallenge = codeChallenge;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}